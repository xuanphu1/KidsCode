{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"About/","text":"About This is a place holder page, the About page will be coming soon If you have an urgency to use this part of the documentation please create a new an issue and I will prioritise it.","title":"About Ardublockly"},{"location":"About/#about","text":"This is a place holder page, the About page will be coming soon If you have an urgency to use this part of the documentation please create a new an issue and I will prioritise it.","title":"About"},{"location":"Add-New-Arduino-Board/","text":"(Work in Progress: This page should describe how to add a new Arduino Board to Ardublockly) Adding a New Arduino Board to Ardublockly As long as the board you would like to add is supported by the Arduino IDE, adding support within Ardublockly is a simple task that only required two files to be modified: ardublocklyserver/compilersettings.py : Needs a new entry onto the ServerCompilerSettings.__arduino_types dictionary. blockly/generators/arduino/boards.js : Needs a new entry in the Blockly.Arduino.Boards.profiles object. In a near-future update Ardublockly will be refactored to require a single edit to the blockly/generators/arduino/boards.js to add a new board, removing the need to update the server code. You can have a look at commit 7cc6bc3fe310449b94e1160cc145876d82586e02 as a simple example to add a new board. Server update Although this might change in the future (and the documentation updated with the change), the server contains a dictionary with the supported boards. Each \"key-value\" pair in this dictionary defines the name of the board and compiler flag respectively. The reason this dictionary exists is because the board data is retrieved from the server each time the settings are opened, dynamically generating the settings drop down, and sending each new selection to the server to be saved on the settings ini file. Then, when the front end sends the code to be compiled, it check this saved setting and appends the relevant compiler flag to the IDE command line invocation. It is important to ensure that the new key entry in this dictionary contains the same name as the new board profile added to blockly/generators/arduino/boards.js . An example with a couple of items can be seen below, to add a new board, the same format entry has to be added to this dictionary. __arduino_types = {'Uno': 'arduino:avr:uno', 'Leonardo': 'arduino:avr:leonardo'} Blockly update The Arduino code generator contains a list of Arduino Board profiles defining board characteristics like the pin, peripheral configuration, compiler flag, etc. The following is the board profile for the Arduino Uno, a similar profile will have to be created for the new board to support. It is important to note that the object name for the new board profile is the same as the key entered in the server dictionary (spaces should be replaced by underscores _ ). /** Arduino Uno board profile. */ Blockly.Arduino.Boards.profiles.uno = { name: 'Arduino Uno', description: 'Arduino Uno standard compatible board', compilerFlag: 'arduino:avr:uno', analogPins: Blockly.Arduino.Boards.generateAnalogIo(0, 5), digitalPins: Blockly.Arduino.Boards.generateDigitalIo(0, 13).concat( Blockly.Arduino.Boards.generateAnalogIo(0, 5)), pwmPins: [['3', '3'], ['5', '5'], ['6', '6'], ['9', '9'], ['10', '10'], ['11', '11']], serial: [['serial', 'Serial']], serialPins: { Serial: [['RX', '0'], ['TX', '1']] }, serialSpeed: [['300', '300'], ['600', '600'], ['1200', '1200'], ['2400', '2400'], ['4800', '4800'], ['9600', '9600'], ['14400', '14400'], ['19200', '19200'], ['28800', '28800'], ['31250', '31250'], ['38400', '38400'], ['57600', '57600'], ['115200', '115200']], spi: [['SPI', 'SPI']], spiPins: { SPI: [['MOSI', '11'], ['MISO', '12'], ['SCK', '13']] }, spiClockDivide: [['2 (8MHz)', 'SPI_CLOCK_DIV2'], ['4 (4MHz)', 'SPI_CLOCK_DIV4'], ['8 (2MHz)', 'SPI_CLOCK_DIV8'], ['16 (1MHz)', 'SPI_CLOCK_DIV16'], ['32 (500KHz)', 'SPI_CLOCK_DIV32'], ['64 (250KHz)', 'SPI_CLOCK_DIV64'], ['128 (125KHz)', 'SPI_CLOCK_DIV128']], i2c: [['I2C', 'Wire']], i2cPins: { Wire: [['SDA', 'A4'], ['SCL', 'A5']] }, i2cSpeed: [['100kHz', '100000L'], ['400kHz', '400000L']], builtinLed: [['BUILTIN_1', '13']], interrupt: [['interrupt0', '2'], ['interrupt1', '3']] }; You can see all the pins are grouped in an array, each item being a \"2-item string array\" on their own. This is because the first item is the pin description in a human-readable format, and the second is the pin string used in to generate the Arduino Code. So, for example, the SPI MOSI pin defined as ['MOSI', '11'] . There is also a couple of helper functions for generating an array of digital and analogue pins. These functions were created only because these pins follow a very simple format, and this saves the developer the time manually type the array: Blockly.Arduino.Boards.generateDigitalIo(pinStart, pinEnd) Blockly.Arduino.Boards.generateAnalogIo(pinStart, pinEnd) So, the a call to Blockly.Arduino.Boards.generateAnalogIo(0, 3) generates the following array: [ ['A0', 'A0'], ['A1', 'A1'], ['A2', 'A2'], ['A3', 'A3'] ]","title":"Add a New Board"},{"location":"Add-New-Arduino-Board/#adding-a-new-arduino-board-to-ardublockly","text":"As long as the board you would like to add is supported by the Arduino IDE, adding support within Ardublockly is a simple task that only required two files to be modified: ardublocklyserver/compilersettings.py : Needs a new entry onto the ServerCompilerSettings.__arduino_types dictionary. blockly/generators/arduino/boards.js : Needs a new entry in the Blockly.Arduino.Boards.profiles object. In a near-future update Ardublockly will be refactored to require a single edit to the blockly/generators/arduino/boards.js to add a new board, removing the need to update the server code. You can have a look at commit 7cc6bc3fe310449b94e1160cc145876d82586e02 as a simple example to add a new board.","title":"Adding a New Arduino Board to Ardublockly"},{"location":"Add-New-Arduino-Board/#server-update","text":"Although this might change in the future (and the documentation updated with the change), the server contains a dictionary with the supported boards. Each \"key-value\" pair in this dictionary defines the name of the board and compiler flag respectively. The reason this dictionary exists is because the board data is retrieved from the server each time the settings are opened, dynamically generating the settings drop down, and sending each new selection to the server to be saved on the settings ini file. Then, when the front end sends the code to be compiled, it check this saved setting and appends the relevant compiler flag to the IDE command line invocation. It is important to ensure that the new key entry in this dictionary contains the same name as the new board profile added to blockly/generators/arduino/boards.js . An example with a couple of items can be seen below, to add a new board, the same format entry has to be added to this dictionary. __arduino_types = {'Uno': 'arduino:avr:uno', 'Leonardo': 'arduino:avr:leonardo'}","title":"Server update"},{"location":"Add-New-Arduino-Board/#blockly-update","text":"The Arduino code generator contains a list of Arduino Board profiles defining board characteristics like the pin, peripheral configuration, compiler flag, etc. The following is the board profile for the Arduino Uno, a similar profile will have to be created for the new board to support. It is important to note that the object name for the new board profile is the same as the key entered in the server dictionary (spaces should be replaced by underscores _ ). /** Arduino Uno board profile. */ Blockly.Arduino.Boards.profiles.uno = { name: 'Arduino Uno', description: 'Arduino Uno standard compatible board', compilerFlag: 'arduino:avr:uno', analogPins: Blockly.Arduino.Boards.generateAnalogIo(0, 5), digitalPins: Blockly.Arduino.Boards.generateDigitalIo(0, 13).concat( Blockly.Arduino.Boards.generateAnalogIo(0, 5)), pwmPins: [['3', '3'], ['5', '5'], ['6', '6'], ['9', '9'], ['10', '10'], ['11', '11']], serial: [['serial', 'Serial']], serialPins: { Serial: [['RX', '0'], ['TX', '1']] }, serialSpeed: [['300', '300'], ['600', '600'], ['1200', '1200'], ['2400', '2400'], ['4800', '4800'], ['9600', '9600'], ['14400', '14400'], ['19200', '19200'], ['28800', '28800'], ['31250', '31250'], ['38400', '38400'], ['57600', '57600'], ['115200', '115200']], spi: [['SPI', 'SPI']], spiPins: { SPI: [['MOSI', '11'], ['MISO', '12'], ['SCK', '13']] }, spiClockDivide: [['2 (8MHz)', 'SPI_CLOCK_DIV2'], ['4 (4MHz)', 'SPI_CLOCK_DIV4'], ['8 (2MHz)', 'SPI_CLOCK_DIV8'], ['16 (1MHz)', 'SPI_CLOCK_DIV16'], ['32 (500KHz)', 'SPI_CLOCK_DIV32'], ['64 (250KHz)', 'SPI_CLOCK_DIV64'], ['128 (125KHz)', 'SPI_CLOCK_DIV128']], i2c: [['I2C', 'Wire']], i2cPins: { Wire: [['SDA', 'A4'], ['SCL', 'A5']] }, i2cSpeed: [['100kHz', '100000L'], ['400kHz', '400000L']], builtinLed: [['BUILTIN_1', '13']], interrupt: [['interrupt0', '2'], ['interrupt1', '3']] }; You can see all the pins are grouped in an array, each item being a \"2-item string array\" on their own. This is because the first item is the pin description in a human-readable format, and the second is the pin string used in to generate the Arduino Code. So, for example, the SPI MOSI pin defined as ['MOSI', '11'] . There is also a couple of helper functions for generating an array of digital and analogue pins. These functions were created only because these pins follow a very simple format, and this saves the developer the time manually type the array: Blockly.Arduino.Boards.generateDigitalIo(pinStart, pinEnd) Blockly.Arduino.Boards.generateAnalogIo(pinStart, pinEnd) So, the a call to Blockly.Arduino.Boards.generateAnalogIo(0, 3) generates the following array: [ ['A0', 'A0'], ['A1', 'A1'], ['A2', 'A2'], ['A3', 'A3'] ]","title":"Blockly update"},{"location":"Add-New-Language/","text":"Adding a New Language to Ardublockly (Work in Progress: This page should describe how to add new languages to Ardublockly) While Blockly has been translated to a large number of languages using TranslateWiki (more info here ), only a small subset of these translations have been expanded to cover the text for Ardublockly. Ardublockly itself does not use TranslateWiki and to add a new language the JavaScript and JSON files have to be manually edited. Files to be edited/created In total there are 3 files that have to be edited or created to add a new language to Ardublockly. One file is for the text contained within the Blockly blocks, one for the GUI text, and one small change required to add the new language to the settings menu. Within the Blockly source code there are 3 files relevant to any translation, all within the blockly/msg/ directory, but only one has to be updated to add a new language (the blockly/msg/json/ language .json , which is second in this list): blockly/msg/messages.js : This file defines all the strings (in English) used by the Ardublockly blocks. If you are only adding a new language, then everything required will already be present, and so THIS FILE SHOULD NOT BE EDITED . Every time Blockly is built, the strings defined here are included in the blockly/msg/ language .js JavaScript files, translated by the entries from their respective JSON files if they have been defined. blockly/msg/json/ language .json : An existing file for your language should already exists in this directory. This JSON file contains an entry for each string item and its translation. For a new languages it will only contain the original Blockly strings, so it will have to be expanded with new Ardublockly-specific entries. The best way to identify the new entries required is to compare it with the English version ( blockly/msg/json/en.json ). All the Ardublockly entries should be at the end of the blockly/msg/json/en.json file. blockly/msg/ language .js : An existing file for your language should already exists in this directory. This file will be automatically generated and updated from both the blockly/msg/messages.js and blockly/msg/json/ language .json data when building Blockly, so THIS FILE SHOULD NOT BE MANUALLY EDITED either. For the Ardublockly GUI two files have to be edited: ardublockly/msg/ language .js : A new file will have to created, the best approach is to copy the English version ( ardublockly/msg/en.js ) and translate it. For the new filename follow the same abbreviation convention from Blockly (so for Spanish it would be es.js , French fr.js , etc) ardublockly/ardublockly/ardublockly_lang.js : At the top of the file there is a JavaScript object that will need a new entry as shown below: javascript Ardublockly.LANGUAGE_NAME = { 'fr': 'Fran\u00e7ais', 'en': 'English', 'es': 'Espa\u00f1ol' }; Generating/Updating the language files Once the translated entries have been added to the JSON file, Blockly needs to be built to convert them into strings in the respective JavaScript file. To do this, from the Ardublockly project folder on a terminal (make sure you are using Python 2): cd blockly python build.py (Mention that Blockly doesn't necessarily have to be built and that just sending a PR with those two files should be fine) (Mention that the front end js file can be updated to include the new language on the settings menu.) (Indicate how to send a PR)","title":"Add a New Language"},{"location":"Add-New-Language/#adding-a-new-language-to-ardublockly","text":"(Work in Progress: This page should describe how to add new languages to Ardublockly) While Blockly has been translated to a large number of languages using TranslateWiki (more info here ), only a small subset of these translations have been expanded to cover the text for Ardublockly. Ardublockly itself does not use TranslateWiki and to add a new language the JavaScript and JSON files have to be manually edited.","title":"Adding a New Language to Ardublockly"},{"location":"Add-New-Language/#files-to-be-editedcreated","text":"In total there are 3 files that have to be edited or created to add a new language to Ardublockly. One file is for the text contained within the Blockly blocks, one for the GUI text, and one small change required to add the new language to the settings menu. Within the Blockly source code there are 3 files relevant to any translation, all within the blockly/msg/ directory, but only one has to be updated to add a new language (the blockly/msg/json/ language .json , which is second in this list): blockly/msg/messages.js : This file defines all the strings (in English) used by the Ardublockly blocks. If you are only adding a new language, then everything required will already be present, and so THIS FILE SHOULD NOT BE EDITED . Every time Blockly is built, the strings defined here are included in the blockly/msg/ language .js JavaScript files, translated by the entries from their respective JSON files if they have been defined. blockly/msg/json/ language .json : An existing file for your language should already exists in this directory. This JSON file contains an entry for each string item and its translation. For a new languages it will only contain the original Blockly strings, so it will have to be expanded with new Ardublockly-specific entries. The best way to identify the new entries required is to compare it with the English version ( blockly/msg/json/en.json ). All the Ardublockly entries should be at the end of the blockly/msg/json/en.json file. blockly/msg/ language .js : An existing file for your language should already exists in this directory. This file will be automatically generated and updated from both the blockly/msg/messages.js and blockly/msg/json/ language .json data when building Blockly, so THIS FILE SHOULD NOT BE MANUALLY EDITED either. For the Ardublockly GUI two files have to be edited: ardublockly/msg/ language .js : A new file will have to created, the best approach is to copy the English version ( ardublockly/msg/en.js ) and translate it. For the new filename follow the same abbreviation convention from Blockly (so for Spanish it would be es.js , French fr.js , etc) ardublockly/ardublockly/ardublockly_lang.js : At the top of the file there is a JavaScript object that will need a new entry as shown below: javascript Ardublockly.LANGUAGE_NAME = { 'fr': 'Fran\u00e7ais', 'en': 'English', 'es': 'Espa\u00f1ol' };","title":"Files to be edited/created"},{"location":"Add-New-Language/#generatingupdating-the-language-files","text":"Once the translated entries have been added to the JSON file, Blockly needs to be built to convert them into strings in the respective JavaScript file. To do this, from the Ardublockly project folder on a terminal (make sure you are using Python 2): cd blockly python build.py (Mention that Blockly doesn't necessarily have to be built and that just sending a PR with those two files should be fine) (Mention that the front end js file can be updated to include the new language on the settings menu.) (Indicate how to send a PR)","title":"Generating/Updating the language files"},{"location":"Arduino-Compiler-Settings/","text":"This part of the documentation is not complete. Compiler Settings Introduction still needs to be written. Mention: Python module Display of settings on the CLI Settings file* Settings file Describe file location Describe use of ConfigParser Describe possible options, list defaults [Arduino_IDE] arduino_exec_path = C:/IDEs/arduino-1.6/arduino_debug.exe arduino_board = Uno arduino_serial_port = COM1 [Arduino_Sketch] sketch_name = ArdublocklySketch sketch_directory = G:/git/ardublockly Web interface General description about viewing and changing settings in Ardublockly WebApp Settings Ajax calls General description including documentation about how to use them Future implementation Brief list of things to implement in this module","title":"Arduino Compiler Settings"},{"location":"Arduino-Compiler-Settings/#compiler-settings","text":"Introduction still needs to be written. Mention: Python module Display of settings on the CLI Settings file*","title":"Compiler Settings"},{"location":"Arduino-Compiler-Settings/#settings-file","text":"Describe file location Describe use of ConfigParser Describe possible options, list defaults [Arduino_IDE] arduino_exec_path = C:/IDEs/arduino-1.6/arduino_debug.exe arduino_board = Uno arduino_serial_port = COM1 [Arduino_Sketch] sketch_name = ArdublocklySketch sketch_directory = G:/git/ardublockly","title":"Settings file"},{"location":"Arduino-Compiler-Settings/#web-interface","text":"General description about viewing and changing settings in Ardublockly WebApp","title":"Web interface"},{"location":"Arduino-Compiler-Settings/#settings-ajax-calls","text":"General description including documentation about how to use them","title":"Settings Ajax calls"},{"location":"Arduino-Compiler-Settings/#future-implementation","text":"Brief list of things to implement in this module","title":"Future implementation"},{"location":"Building-Ardublockly/","text":"Building Ardublockly The package folder contains the Electron project and Python scripts required to package Ardublockly into a stand-alone executable. This way it can be distributed without any dependencies other than having the Arduino IDE. The application can be categorised in three main components: Python server HTML/Javascript front end * Desktop application wrapper (Electron). The Python server is packaged into its own stand-alone executable using PyInstaller . The desktop wrapper is based on Electron, which uses node.js. The node.js component is only used where required for the application to integrate well with the individual desktop platforms. Originally the Chromium Embedded Framework Python bindings were used, but cross-platform maintenance proved to be problematic and Electron has provided a much smoother alternative. Continuous Integration Build Servers Each commit to the Ardublockly GitHub repository triggers the build servers to follow all these build steps and upload the build output to an online server to make them available for download. There is a CI Server for each platform (Windows, macOS, and Linux) with their own configuration script. So it could be useful to have a look at these scripts if some of the instructions here are not completely clear: Windows AppVeyor script: https://github.com/carlosperate/ardublockly/blob/master/.appveyor.yml macOS Travis script: https://github.com/carlosperate/ardublockly/blob/master/.travis.yml Linux CircleCI script: https://github.com/carlosperate/ardublockly/blob/master/circle.yml Ardublockly build dependencies Git Git needs to be installed on the system and accessible through the command line interface. Python The build scripts included in the package folder were originally developed and tested on Python 2.7, and later the build system was moved to use Python 3.4. Therefore, while these scripts should still be compatible with Python 2, in their current form they have only been tested on Python 3. While the \"core version\" of Ardublockly (command line server + browser-based GUI) should be fully compatible with both Python 2 and 3 (tested on Python 2.7 and 3.4), there is one particular step in this build process that requires Python 2.7. If you are using Python virtual environments on Windows this collection of Python extensions binaries is highly recommended. The specific versions of the Python dependencies can be found in the package/requirements.txt file. PyInstaller Converts Python scripts into stand-alone executables. PyInstaller can be easily installed using pip: pip install pyinstaller MkDocs MkDocs is a static page generator specifically designed for documentation using Markdown. The project documentation is written and hosted in the Ardublockly GitHub Wiki . The build script for the documentation pulls its markdown files and converts them into an HTML static site for offline access. More information about this procedure can be found in this article . MkDocs can be easily installed using pip: pip install MkDocs Node.js Node.js is required to run Electron . It can be downloaded from the official website . The npm package manager should be included with node, which is used to deal with all the Electron application dependencies. Download the Source Code Download and initialise this project repository: git clone https://github.com/carlosperate/ardublockly.git cd ardublockly git submodule update --init --recursive If you have already downloaded the Ardublockly source code, make sure the submodules have been initialised. The submodules in this repository are the 'closure-library' in the project root directory, and 'ardublockly.wiki' in the 'package/ardublocklydocs/' folder. You can run the last git command listed above, from the project root directory, to ensure the submodule directories are not empty. Build Instructions First step: Blockly When Blockly is compiled, all the source code contained in the blockly folder is compressed in the blockly/blockly_compressed.js , blockly/blocks_compressed.js , and blockly/arduino_compressed.js files (among others). The repository version of these compressed files might not be the most up-to-date, so the first step should be to compile Blockly to ensure the compressed files are up-to-date. You will need Python 2.7 for this step, as the Blockly build script is not currently compatible with Python 3. You will also need to be online, as the Google's \"Closure Compiler Service\" is used. From the project root directory: cd blockly python build.py At this point, to continue with the next steps you'll have to go back to the project root directory: cd ../ Second step: Python server To build the Python application all you have to do is execute the build_pyinstaller.py file from the project root directory. It is highly recommended to use Python 3 instead of Python 2 for this step: python package/build_pyinstaller.py The optional command line argument linux , mac , or windows can be provided, but the operating systems should be automatically detected. This will remove any previous build directory, rebuild, and create any required launch script into the project root ( ardublockly_run.sh on Linux, or ardublockly_run.bat on Windows). Third step: Electron Execute the following commands from the project root directory: cd package\\electron npm install npm run release The npm scripts will automatically detect and deal with the operating system different build requirements. At this point, to continue with the next steps, it is recommended to go back to the project root directory: cd ../../ Fourth step: Documentation Build the offline documentation by running the build_docs.py script from the project root directory (Python 3 recommended): python package\\build_docs.py This will remove any previous build directory, rebuild it, and remove any temporary files. Final Step: Packing all Ardublockly This step is only meant if you wish to pack the Ardublockly application into a distributable form. You can pack Ardublockly running the following command from the project root directory: python package/pack_ardublockly.py The pack script is designed for the build servers to zip the required contents into a single file to be uploaded to cloud storage, so it does not pack all the repository source code. This script creates a new folder on the same level as the project root, removes unnecessary files from this copied directory, and then zips it and saves it into the folder 'upload' within the original project root.","title":"Building Ardublockly"},{"location":"Building-Ardublockly/#building-ardublockly","text":"The package folder contains the Electron project and Python scripts required to package Ardublockly into a stand-alone executable. This way it can be distributed without any dependencies other than having the Arduino IDE. The application can be categorised in three main components: Python server HTML/Javascript front end * Desktop application wrapper (Electron). The Python server is packaged into its own stand-alone executable using PyInstaller . The desktop wrapper is based on Electron, which uses node.js. The node.js component is only used where required for the application to integrate well with the individual desktop platforms. Originally the Chromium Embedded Framework Python bindings were used, but cross-platform maintenance proved to be problematic and Electron has provided a much smoother alternative.","title":"Building Ardublockly"},{"location":"Building-Ardublockly/#continuous-integration-build-servers","text":"Each commit to the Ardublockly GitHub repository triggers the build servers to follow all these build steps and upload the build output to an online server to make them available for download. There is a CI Server for each platform (Windows, macOS, and Linux) with their own configuration script. So it could be useful to have a look at these scripts if some of the instructions here are not completely clear: Windows AppVeyor script: https://github.com/carlosperate/ardublockly/blob/master/.appveyor.yml macOS Travis script: https://github.com/carlosperate/ardublockly/blob/master/.travis.yml Linux CircleCI script: https://github.com/carlosperate/ardublockly/blob/master/circle.yml","title":"Continuous Integration Build Servers"},{"location":"Building-Ardublockly/#ardublockly-build-dependencies","text":"","title":"Ardublockly build dependencies"},{"location":"Building-Ardublockly/#git","text":"Git needs to be installed on the system and accessible through the command line interface.","title":"Git"},{"location":"Building-Ardublockly/#python","text":"The build scripts included in the package folder were originally developed and tested on Python 2.7, and later the build system was moved to use Python 3.4. Therefore, while these scripts should still be compatible with Python 2, in their current form they have only been tested on Python 3. While the \"core version\" of Ardublockly (command line server + browser-based GUI) should be fully compatible with both Python 2 and 3 (tested on Python 2.7 and 3.4), there is one particular step in this build process that requires Python 2.7. If you are using Python virtual environments on Windows this collection of Python extensions binaries is highly recommended. The specific versions of the Python dependencies can be found in the package/requirements.txt file.","title":"Python"},{"location":"Building-Ardublockly/#pyinstaller","text":"Converts Python scripts into stand-alone executables. PyInstaller can be easily installed using pip: pip install pyinstaller","title":"PyInstaller"},{"location":"Building-Ardublockly/#mkdocs","text":"MkDocs is a static page generator specifically designed for documentation using Markdown. The project documentation is written and hosted in the Ardublockly GitHub Wiki . The build script for the documentation pulls its markdown files and converts them into an HTML static site for offline access. More information about this procedure can be found in this article . MkDocs can be easily installed using pip: pip install MkDocs","title":"MkDocs"},{"location":"Building-Ardublockly/#nodejs","text":"Node.js is required to run Electron . It can be downloaded from the official website . The npm package manager should be included with node, which is used to deal with all the Electron application dependencies.","title":"Node.js"},{"location":"Building-Ardublockly/#download-the-source-code","text":"Download and initialise this project repository: git clone https://github.com/carlosperate/ardublockly.git cd ardublockly git submodule update --init --recursive If you have already downloaded the Ardublockly source code, make sure the submodules have been initialised. The submodules in this repository are the 'closure-library' in the project root directory, and 'ardublockly.wiki' in the 'package/ardublocklydocs/' folder. You can run the last git command listed above, from the project root directory, to ensure the submodule directories are not empty.","title":"Download the Source Code"},{"location":"Building-Ardublockly/#build-instructions","text":"","title":"Build Instructions"},{"location":"Building-Ardublockly/#first-step-blockly","text":"When Blockly is compiled, all the source code contained in the blockly folder is compressed in the blockly/blockly_compressed.js , blockly/blocks_compressed.js , and blockly/arduino_compressed.js files (among others). The repository version of these compressed files might not be the most up-to-date, so the first step should be to compile Blockly to ensure the compressed files are up-to-date. You will need Python 2.7 for this step, as the Blockly build script is not currently compatible with Python 3. You will also need to be online, as the Google's \"Closure Compiler Service\" is used. From the project root directory: cd blockly python build.py At this point, to continue with the next steps you'll have to go back to the project root directory: cd ../","title":"First step: Blockly"},{"location":"Building-Ardublockly/#second-step-python-server","text":"To build the Python application all you have to do is execute the build_pyinstaller.py file from the project root directory. It is highly recommended to use Python 3 instead of Python 2 for this step: python package/build_pyinstaller.py The optional command line argument linux , mac , or windows can be provided, but the operating systems should be automatically detected. This will remove any previous build directory, rebuild, and create any required launch script into the project root ( ardublockly_run.sh on Linux, or ardublockly_run.bat on Windows).","title":"Second step: Python server"},{"location":"Building-Ardublockly/#third-step-electron","text":"Execute the following commands from the project root directory: cd package\\electron npm install npm run release The npm scripts will automatically detect and deal with the operating system different build requirements. At this point, to continue with the next steps, it is recommended to go back to the project root directory: cd ../../","title":"Third step: Electron"},{"location":"Building-Ardublockly/#fourth-step-documentation","text":"Build the offline documentation by running the build_docs.py script from the project root directory (Python 3 recommended): python package\\build_docs.py This will remove any previous build directory, rebuild it, and remove any temporary files.","title":"Fourth step: Documentation"},{"location":"Building-Ardublockly/#final-step-packing-all-ardublockly","text":"This step is only meant if you wish to pack the Ardublockly application into a distributable form. You can pack Ardublockly running the following command from the project root directory: python package/pack_ardublockly.py The pack script is designed for the build servers to zip the required contents into a single file to be uploaded to cloud storage, so it does not pack all the repository source code. This script creates a new folder on the same level as the project root, removes unnecessary files from this copied directory, and then zips it and saves it into the folder 'upload' within the original project root.","title":"Final Step: Packing all Ardublockly"},{"location":"Configure-Ardublockly/","text":"This is a placeholder page, instructions will be coming soon If you have an urgency to use this part of the documentation please create a new an issue and I will prioritize it","title":"Configure Ardublockly"},{"location":"Create-Blocks-~-Extending-Ardublockly/","text":"(This is a stub of the documentation for the functionality included to easily extend Ardublockly to support new blocks) (Introductory paragraph should go here) (Top view description of the extensibility options should go here) Adding Pin Types (this has not yet been implemented) Blockly.Arduino.PinTypes.add('PIN_NAME'); Adding a new Data Types Blockly.Types.addType(typeName, basicType, compatibleTypes) typeName : An String to identify the name of the type. basicType : A Blockly.Type.BasicTypes object that defined its basic type compatibleTypes : An array of Blockly.Type.Types that this Type can be compatible with. (Add a note about how compatibility does not go both ways, e.g. a block that takes a Number can also take a compatible boolean, but a block that takes a boolean does not necessarily take a Number) Extend other blocks to have a new block as compatible: (Not yet implemented) Blockly.Types.addAsCompatible(originType, compatibleType) originType : A Blockly.Type.Types for which to extend its compatibility list. compatibleType : The Blockly.Type.Types to add as compatible. Basic Type (Explain that a basic type is the most fundamental \"type unit\", so a new basic type should not be something that could be \"derived\" from an existing one. For example, a \"long integer\" is a type of NUMBER so a new Type for that should be created instead of a new \"basic type\", and a \"colour\" cannot be represented by any of the current basic types, so it should create its own.) Current basic types: Blockly.Type.BasicTypes.TEXT // General text string type Blockly.Type.BasicTypes.BOOLEAN // Can only have two values, generally 0 for false, or 1 for true Blockly.Type.BasicTypes.NUMBER // A general number type Blockly.Type.BasicTypes.DECIMAL // Number type for numbers with a fractional part Blockly.Type.BasicTypes.ARRAY // Array of any type of items Blockly.Type.BasicTypes.COLOUR // For the colour blocks, not used in Ardublockly Blockly.Type.BasicTypes.NULL // Used as a no type wild card natively Blockly.Type.BasicTypes.UNDEF // Can be used to delegate type assignment Add a new Basic Type: (Not yet implemented) Blockly.Types.addBasicType('TYPE_NAME')","title":"Extending Ardublockly"},{"location":"Create-Blocks-~-Extending-Ardublockly/#adding-pin-types","text":"(this has not yet been implemented) Blockly.Arduino.PinTypes.add('PIN_NAME');","title":"Adding Pin Types"},{"location":"Create-Blocks-~-Extending-Ardublockly/#adding-a-new-data-types","text":"Blockly.Types.addType(typeName, basicType, compatibleTypes) typeName : An String to identify the name of the type. basicType : A Blockly.Type.BasicTypes object that defined its basic type compatibleTypes : An array of Blockly.Type.Types that this Type can be compatible with. (Add a note about how compatibility does not go both ways, e.g. a block that takes a Number can also take a compatible boolean, but a block that takes a boolean does not necessarily take a Number) Extend other blocks to have a new block as compatible: (Not yet implemented) Blockly.Types.addAsCompatible(originType, compatibleType) originType : A Blockly.Type.Types for which to extend its compatibility list. compatibleType : The Blockly.Type.Types to add as compatible.","title":"Adding a new Data Types"},{"location":"Create-Blocks-~-Extending-Ardublockly/#basic-type","text":"(Explain that a basic type is the most fundamental \"type unit\", so a new basic type should not be something that could be \"derived\" from an existing one. For example, a \"long integer\" is a type of NUMBER so a new Type for that should be created instead of a new \"basic type\", and a \"colour\" cannot be represented by any of the current basic types, so it should create its own.) Current basic types: Blockly.Type.BasicTypes.TEXT // General text string type Blockly.Type.BasicTypes.BOOLEAN // Can only have two values, generally 0 for false, or 1 for true Blockly.Type.BasicTypes.NUMBER // A general number type Blockly.Type.BasicTypes.DECIMAL // Number type for numbers with a fractional part Blockly.Type.BasicTypes.ARRAY // Array of any type of items Blockly.Type.BasicTypes.COLOUR // For the colour blocks, not used in Ardublockly Blockly.Type.BasicTypes.NULL // Used as a no type wild card natively Blockly.Type.BasicTypes.UNDEF // Can be used to delegate type assignment Add a new Basic Type: (Not yet implemented) Blockly.Types.addBasicType('TYPE_NAME')","title":"Basic Type"},{"location":"Create-Blocks/","text":"(This is a stub of the documentation to create new Ardublockly blocks) Create Ardublockly Blocks One of the advantages of using Google's Blockly for the visual blocks framework is the simplicity to create new blocks capable to generate Arduino code. All the code is done in JavaScript and you can be even use Blockly itself to auto-generate some of the code. The process is divided in three steps: Define the block: This includes its shape, connections, fields, etc Create code generator: To generate the Arduino code based for the new block Block inclusion: Add the block into the Ardublockly toolbox Block Definition (A proper description still need to be included here, each line needs to be expanded into a proper paragraph) The blocks are defined in a JavaScript. You can have a look at the current blocks in the blockly/blocks/arduino directory. One good starting point is to go through the official Blockly documentation: Blockly's Define Blocks Documentation You can use Blockly Factory to generate a lot of this code for you. Arduino Code Generator (A proper description still need to be included here, each line needs to be expanded into a proper paragraph) The Arduino code gener is defined in a JavaScript. You can have a look at the current blocks in the blockly/generators/arduino directory. One good starting point is to go through the official Blockly documentation: Blockly's Generating Code Documentation For Arduino specific functionality I am currently working on an API to be able to easily extend the Ardublockly functionality to take advantage of board settings, pins, static typing, etc. For now a very crude version of the documentation can be found in the Extending-Ardublockly page. Block Inclusion (A proper description still need to be included here, each line needs to be expanded into a proper paragraph) The first you need to find out is if you are running the compressed or uncompressed version of Blockly. During development it is highly recommendable to run Blockly uncompressed, the instructions to do so can be found here: Run Uncompressed Blockly If you are running the compressed version you will have to build blockly first. (Instruction should go here, or in the build page with a link here) To include the block in the toolbox include the XML code into the ardublockly/ardublockly_toolbox.js file.","title":"Overview"},{"location":"Create-Blocks/#create-ardublockly-blocks","text":"One of the advantages of using Google's Blockly for the visual blocks framework is the simplicity to create new blocks capable to generate Arduino code. All the code is done in JavaScript and you can be even use Blockly itself to auto-generate some of the code. The process is divided in three steps: Define the block: This includes its shape, connections, fields, etc Create code generator: To generate the Arduino code based for the new block Block inclusion: Add the block into the Ardublockly toolbox","title":"Create Ardublockly Blocks"},{"location":"Create-Blocks/#block-definition","text":"(A proper description still need to be included here, each line needs to be expanded into a proper paragraph) The blocks are defined in a JavaScript. You can have a look at the current blocks in the blockly/blocks/arduino directory. One good starting point is to go through the official Blockly documentation: Blockly's Define Blocks Documentation You can use Blockly Factory to generate a lot of this code for you.","title":"Block Definition"},{"location":"Create-Blocks/#arduino-code-generator","text":"(A proper description still need to be included here, each line needs to be expanded into a proper paragraph) The Arduino code gener is defined in a JavaScript. You can have a look at the current blocks in the blockly/generators/arduino directory. One good starting point is to go through the official Blockly documentation: Blockly's Generating Code Documentation For Arduino specific functionality I am currently working on an API to be able to easily extend the Ardublockly functionality to take advantage of board settings, pins, static typing, etc. For now a very crude version of the documentation can be found in the Extending-Ardublockly page.","title":"Arduino Code Generator"},{"location":"Create-Blocks/#block-inclusion","text":"(A proper description still need to be included here, each line needs to be expanded into a proper paragraph) The first you need to find out is if you are running the compressed or uncompressed version of Blockly. During development it is highly recommendable to run Blockly uncompressed, the instructions to do so can be found here: Run Uncompressed Blockly If you are running the compressed version you will have to build blockly first. (Instruction should go here, or in the build page with a link here) To include the block in the toolbox include the XML code into the ardublockly/ardublockly_toolbox.js file.","title":"Block Inclusion"},{"location":"Create-~-Functions/","text":"(This is a placeholder, the toolbox category functions documentation still needs to be created.)","title":"Functions"},{"location":"Create-~-IfElse/","text":"Conditional statements are central to computer programming. They make it possible to express statements like: * If there is a path to the left, turn left. * If score = 100, print \"Well done!\". See additional information about conditional statements . Blocks If blocks The simplest conditional statement is an if block, as shown: When run, this will compare the value of the variable x to 100. If it is larger, \"What a big number!\" will be printed. Otherwise, nothing happens. If-Else blocks It is also possible to specify that something should happen if the condition is not true, as shown in this example: As with the previous block, \"What a big number!\" will be printed if x 100; otherwise, \"That's not very big.\" will be printed. An if block may have zero or one else sections but not more than one. If-Else-If blocks It is also possible to test multiple conditions with a single if block by adding else if clauses: The block first checks if x 100, printing \"What a big number!\" if it is. If it is not, it goes on to check if x = 42. If so, it prints \"That's my lucky number.\" Otherwise, nothing happens. An if block may have any number of else if sections. Conditions are evaluated top to bottom until one is satisfied, or until no more conditions are left. If-Else-If-Else blocks As shown here, if blocks may have both else if and else sections: The else section guarantees that some action is performed, even if none of the prior conditions are true. An else section may occur after any number of else if sections, including zero. Block Modification Only the plain if block appears in the toolbox: To add else if and else clauses, the user needs to click on the gear icon, which opens a new window: The user can then drag else if and else clauses into the if block, as well as reordering and removing them. When finished, the user should click on the minus sign, which closes the window, as shown here: Note that the shapes of the blocks allows any number of else if subblocks to be added but only up to one else block. This document has been based on the Blockly documentation under the same title by Neil Fraser released under CC BY 3.0","title":"Logic If/Else"},{"location":"Create-~-IfElse/#blocks","text":"","title":"Blocks"},{"location":"Create-~-IfElse/#if-blocks","text":"The simplest conditional statement is an if block, as shown: When run, this will compare the value of the variable x to 100. If it is larger, \"What a big number!\" will be printed. Otherwise, nothing happens.","title":"If blocks"},{"location":"Create-~-IfElse/#if-else-blocks","text":"It is also possible to specify that something should happen if the condition is not true, as shown in this example: As with the previous block, \"What a big number!\" will be printed if x 100; otherwise, \"That's not very big.\" will be printed. An if block may have zero or one else sections but not more than one.","title":"If-Else blocks"},{"location":"Create-~-IfElse/#if-else-if-blocks","text":"It is also possible to test multiple conditions with a single if block by adding else if clauses: The block first checks if x 100, printing \"What a big number!\" if it is. If it is not, it goes on to check if x = 42. If so, it prints \"That's my lucky number.\" Otherwise, nothing happens. An if block may have any number of else if sections. Conditions are evaluated top to bottom until one is satisfied, or until no more conditions are left.","title":"If-Else-If blocks"},{"location":"Create-~-IfElse/#if-else-if-else-blocks","text":"As shown here, if blocks may have both else if and else sections: The else section guarantees that some action is performed, even if none of the prior conditions are true. An else section may occur after any number of else if sections, including zero.","title":"If-Else-If-Else blocks"},{"location":"Create-~-IfElse/#block-modification","text":"Only the plain if block appears in the toolbox: To add else if and else clauses, the user needs to click on the gear icon, which opens a new window: The user can then drag else if and else clauses into the if block, as well as reordering and removing them. When finished, the user should click on the minus sign, which closes the window, as shown here: Note that the shapes of the blocks allows any number of else if subblocks to be added but only up to one else block. This document has been based on the Blockly documentation under the same title by Neil Fraser released under CC BY 3.0","title":"Block Modification"},{"location":"Create-~-Logic/","text":"Boolean algebra is a mathematical system that has two values: * true * false Boolean values (also called conditions ) are used in these control block, which contain examples: * conditional blocks * repeat blocks One of the many examples from those pages is: If the value of the variable x is greater than 100, the condition is true , and the text \"What a big number!\" is printed. If the value of x is not greater than 100, the condition is false , and \"That's not very big.\" is printed. Boolean values can also be stored in variables and passed to procedures, the same as number, text, and list values. Blocks If a block expects a Boolean value as an input, it usually interprets an absent input as false . An example is provided below. Non-Boolean values cannot be directly plugged in where Boolean values are expected, although it is possible (but inadvisable) to store a non-Boolean value in a variable, then plug that into the input. Neither of these practices are recommended, and their behaviour could change in future versions of Blockly. Values A single block, with a dropdown specifying either true or false , can be used to get a boolean value: comparisons There are six comparison operators. Each takes two inputs (normally numbers) and returns true or false depending on how the inputs compare with each other. The six operators are: equals, not equals, less than, less than or equal, greater than, greater than or equal. logical operations The and block will return true only if both of its two inputs are also true. The or block will return true if either of its two inputs are true. not The not block converts its Boolean input into its opposite. For example, the result of: is false. As mentioned above, if no input is provided, a value of true is assumed, so the following block produces the value false : Leaving an input empty is not recommended, however. This document has been based on the Blockly documentation under the same title by Neil Fraser released under CC BY 3.0","title":"Logic"},{"location":"Create-~-Logic/#blocks","text":"If a block expects a Boolean value as an input, it usually interprets an absent input as false . An example is provided below. Non-Boolean values cannot be directly plugged in where Boolean values are expected, although it is possible (but inadvisable) to store a non-Boolean value in a variable, then plug that into the input. Neither of these practices are recommended, and their behaviour could change in future versions of Blockly.","title":"Blocks"},{"location":"Create-~-Logic/#values","text":"A single block, with a dropdown specifying either true or false , can be used to get a boolean value:","title":"Values"},{"location":"Create-~-Logic/#comparisons","text":"There are six comparison operators. Each takes two inputs (normally numbers) and returns true or false depending on how the inputs compare with each other. The six operators are: equals, not equals, less than, less than or equal, greater than, greater than or equal.","title":"comparisons"},{"location":"Create-~-Logic/#logical-operations","text":"The and block will return true only if both of its two inputs are also true. The or block will return true if either of its two inputs are true.","title":"logical operations"},{"location":"Create-~-Logic/#not","text":"The not block converts its Boolean input into its opposite. For example, the result of: is false. As mentioned above, if no input is provided, a value of true is assumed, so the following block produces the value false : Leaving an input empty is not recommended, however. This document has been based on the Blockly documentation under the same title by Neil Fraser released under CC BY 3.0","title":"not"},{"location":"Create-~-Loops/","text":"The Control category holds blocks that control whether other blocks placed in their body are run. (For example, in the below \"repeat\" block, the body contains the \"print\" block and its input.) There are two types of control blocks: IfElse (described on their own page) and these, which control how many times the body is run and, in some cases, the value of a variable used within the body. These structures are called loops since the body is repeated (possibly) multiple times, reminiscent of a rope containing loops. Each pass through the loop is called an iteration . For more information, see https://en.wikipedia.org/wiki/Control_flow#Loops. Blocks for Loop Creation repeat The simplest \"repeat\" block runs the code in its body the specified number of times. For example, the following block will print \"Hello!\" ten times. repeat while Imagine a game in which a player rolls a die and adds up all of the values rolled as long as the total is less than 30. The following blocks implement that game: A variable named total gets an initial value of 0. The loop begins with a check that total is less than 30. If so, the blocks in the body are run. A random number in the range 1 to 6 is generated (simulating a die roll) and stored in a variable named roll . The number rolled is printed. The variable total gets increased by roll . The end of the loop having been reached, control goes back to step 2. When the loop completes, any subsequent blocks (not shown) would be run. In our example, the loop would end after some number of random numbers in the range 1 to 6 had been printed, and the variable total would hold the sum of these numbers, which would be guaranteed to be at least 30. For more information, see https://en.wikipedia.org/wiki/While_loop. repeat until \"Repeat while\" loops repeat their bodies while some condition is true. Repeat-until loops are similar except that they repeat their bodies until some condition is true. The following blocks are equivalent to the previous example because the loop contains until total is greater than or equal to 30. count with The count with block (called a for loop in most programming languages) advances a variable from the first value to the second value by the increment amount (third value), running the body once for each value. For example, the following program prints the numbers 1, 3, and 5. As shown by the two following loops, each of which prints the numbers 5, 3, and 1, the first input may be larger than the second. The behavior is the same whether the increment amount (third value) is positive or negative. for each The for each block (see https://en.wikipedia.org/wiki/Foreach) is similar, except instead of giving the loop variable values in a numeric sequence, it uses the values from a list in turn. The following program prints each element of the list: \"alpha\", \"beta\", \"gamma\". Loop Termination Blocks Most loops run until the terminating condition (in the case of repeat blocks) is met or until all values have been taken by the loop variable (in the case of count with and for each loops). Two rarely needed but occasionally useful blocks provide additional means for controlling loop behavior. Although the below examples are for for each loops, they can be used with any type of loop. continue with next iteration The continue with next iteration (called continue in most programming languages) causes the remaining code in the body to be skipped and for the next iteration (pass) of the loop to begin. The following program prints \"alpha\" on the first iteration of the loop. On the second iteration, the continue with next iteration block is run, skipping the printing of \"beta\". On the final iteration, \"gamma\" is printed. break out of loop The break out of loop block provides an early exit from a loop . The following program prints \"alpha\" on the first iteration and \"breaks out\" of the loop on the second iteration when the loop variable is equal to \"beta\". The third item in the list is never reached. This document has been based on the Blockly documentation under the same title by Neil Fraser released under CC BY 3.0","title":"Loops"},{"location":"Create-~-Loops/#blocks-for-loop-creation","text":"","title":"Blocks for Loop Creation"},{"location":"Create-~-Loops/#repeat","text":"The simplest \"repeat\" block runs the code in its body the specified number of times. For example, the following block will print \"Hello!\" ten times.","title":"repeat"},{"location":"Create-~-Loops/#repeat-while","text":"Imagine a game in which a player rolls a die and adds up all of the values rolled as long as the total is less than 30. The following blocks implement that game: A variable named total gets an initial value of 0. The loop begins with a check that total is less than 30. If so, the blocks in the body are run. A random number in the range 1 to 6 is generated (simulating a die roll) and stored in a variable named roll . The number rolled is printed. The variable total gets increased by roll . The end of the loop having been reached, control goes back to step 2. When the loop completes, any subsequent blocks (not shown) would be run. In our example, the loop would end after some number of random numbers in the range 1 to 6 had been printed, and the variable total would hold the sum of these numbers, which would be guaranteed to be at least 30. For more information, see https://en.wikipedia.org/wiki/While_loop.","title":"repeat while"},{"location":"Create-~-Loops/#repeat-until","text":"\"Repeat while\" loops repeat their bodies while some condition is true. Repeat-until loops are similar except that they repeat their bodies until some condition is true. The following blocks are equivalent to the previous example because the loop contains until total is greater than or equal to 30.","title":"repeat until"},{"location":"Create-~-Loops/#count-with","text":"The count with block (called a for loop in most programming languages) advances a variable from the first value to the second value by the increment amount (third value), running the body once for each value. For example, the following program prints the numbers 1, 3, and 5. As shown by the two following loops, each of which prints the numbers 5, 3, and 1, the first input may be larger than the second. The behavior is the same whether the increment amount (third value) is positive or negative.","title":"count with"},{"location":"Create-~-Loops/#for-each","text":"The for each block (see https://en.wikipedia.org/wiki/Foreach) is similar, except instead of giving the loop variable values in a numeric sequence, it uses the values from a list in turn. The following program prints each element of the list: \"alpha\", \"beta\", \"gamma\".","title":"for each"},{"location":"Create-~-Loops/#loop-termination-blocks","text":"Most loops run until the terminating condition (in the case of repeat blocks) is met or until all values have been taken by the loop variable (in the case of count with and for each loops). Two rarely needed but occasionally useful blocks provide additional means for controlling loop behavior. Although the below examples are for for each loops, they can be used with any type of loop.","title":"Loop Termination Blocks"},{"location":"Create-~-Loops/#continue-with-next-iteration","text":"The continue with next iteration (called continue in most programming languages) causes the remaining code in the body to be skipped and for the next iteration (pass) of the loop to begin. The following program prints \"alpha\" on the first iteration of the loop. On the second iteration, the continue with next iteration block is run, skipping the printing of \"beta\". On the final iteration, \"gamma\" is printed.","title":"continue with next iteration"},{"location":"Create-~-Loops/#break-out-of-loop","text":"The break out of loop block provides an early exit from a loop . The following program prints \"alpha\" on the first iteration and \"breaks out\" of the loop on the second iteration when the loop variable is equal to \"beta\". The third item in the list is never reached. This document has been based on the Blockly documentation under the same title by Neil Fraser released under CC BY 3.0","title":"break out of loop"},{"location":"Create-~-Math/","text":"(This is a placeholder, the toolbox category math documentation still needs to be created.)","title":"Math"},{"location":"Create-~-Text/","text":"Examples of pieces of text are: * \"thing #1\" * \"March 12, 2010\" * \"\" (the empty text) Text can contain letters (which may be lower-case or upper-case), numbers, punctuation marks, other symbols, and blank spaces between words. (The non-Blockly term for all of these different types of text is character .) Blocks Text creation The following block creates the piece of text \"hello\" and stores it in the variable named greeting . The create text with block combines (concatenates) the value of the greeting variable and the new text \"world\" to create the text \"helloworld\". Note that there is no space between them, since none was in either original text. To increase the number of text inputs, click on the gear icon, which changes the view to: Additional inputs are added by dragging an \"item\" block from the gray toolbox on the left into the \"join\" block. Text modification The to...append text block adds the given text to the specified variable. In this case, it changes the value of the variable greeting from \"hello\" to \"hello, there!\" Text length The length of blocks count the number of letters, numbers, etc., in each text. The length of \"We're #1!\" is 9, and the length of the empty text is 0. Checking for empty text The is empty block checks whether the given text is empty (has length 0). The result is true in the first case and false in the second. Finding text These blocks can be used to check whether a piece of text is in another piece of text and, if so, where it appears. For example, this asks for the first occurrence of \"e\" in \"hello\". The result is 2. This asks for the last occurrence of \"e\" in \"hello\", which, is also 2. Whether first or last is selected, this block will give the result 0, since \"hello\" does not contain \"z\". Extracting text Extracting a single character This gets \"b\", the second letter in \"abcde\": This gets \"d\", the second to last letter in \"abcde\": This gets \"a\", the first letter in \"abcde\": This gets \"e\", the last letter in \"abcde\": This gets any of the 5 letters in \"abcde\" with equal probability: None of these modify the text on which the extraction is performed. Extracting a region of text The in text...get substring block allows a region of text to be extracted, starting with either: * letter # * letter # from end * the first letter and ending with: * letter # * letter # from end * the last letter In the following example, \"abc\" is extracted. Adjusting text case This block creates a version of the input text that is either: * UPPER CASE (all letters upper-case) * lower case * Title Case (first letters upper-case, other letters lower-case) The result of the following block is \"HELLO\". Non-alphabetic characters are not affected. Note that this block on text in languages without case, such as Chinese. Trimming (removing) spaces The following block removes space characters from: * the beginning of the text * the end of the text * both sides of the text The result of the following block is \"hi there\". (Spaces in the middle of the text are not affected.) Printing text The print block causes the input value to be displayed in a pop-up window, as shown: If the code is exported as JavaScript, Python, or Dart, it will be printed to the console (screen). In no case is it sent to the printer, as the name might suggest. Getting input from the user The following block creates a pop-up window that prompts the user to enter a name. The result is stored in the variable name : This is what the current version of the pop-up window looks like: There is also a version of the block for getting a number from the user: This document has been based on the Blockly documentation under the same title by Neil Fraser released under CC BY 3.0","title":"Text"},{"location":"Create-~-Text/#blocks","text":"","title":"Blocks"},{"location":"Create-~-Text/#text-creation","text":"The following block creates the piece of text \"hello\" and stores it in the variable named greeting . The create text with block combines (concatenates) the value of the greeting variable and the new text \"world\" to create the text \"helloworld\". Note that there is no space between them, since none was in either original text. To increase the number of text inputs, click on the gear icon, which changes the view to: Additional inputs are added by dragging an \"item\" block from the gray toolbox on the left into the \"join\" block.","title":"Text creation"},{"location":"Create-~-Text/#text-modification","text":"The to...append text block adds the given text to the specified variable. In this case, it changes the value of the variable greeting from \"hello\" to \"hello, there!\"","title":"Text modification"},{"location":"Create-~-Text/#text-length","text":"The length of blocks count the number of letters, numbers, etc., in each text. The length of \"We're #1!\" is 9, and the length of the empty text is 0.","title":"Text length"},{"location":"Create-~-Text/#checking-for-empty-text","text":"The is empty block checks whether the given text is empty (has length 0). The result is true in the first case and false in the second.","title":"Checking for empty text"},{"location":"Create-~-Text/#finding-text","text":"These blocks can be used to check whether a piece of text is in another piece of text and, if so, where it appears. For example, this asks for the first occurrence of \"e\" in \"hello\". The result is 2. This asks for the last occurrence of \"e\" in \"hello\", which, is also 2. Whether first or last is selected, this block will give the result 0, since \"hello\" does not contain \"z\".","title":"Finding text"},{"location":"Create-~-Text/#extracting-text","text":"","title":"Extracting text"},{"location":"Create-~-Text/#extracting-a-single-character","text":"This gets \"b\", the second letter in \"abcde\": This gets \"d\", the second to last letter in \"abcde\": This gets \"a\", the first letter in \"abcde\": This gets \"e\", the last letter in \"abcde\": This gets any of the 5 letters in \"abcde\" with equal probability: None of these modify the text on which the extraction is performed.","title":"Extracting a single character"},{"location":"Create-~-Text/#extracting-a-region-of-text","text":"The in text...get substring block allows a region of text to be extracted, starting with either: * letter # * letter # from end * the first letter and ending with: * letter # * letter # from end * the last letter In the following example, \"abc\" is extracted.","title":"Extracting a region of text"},{"location":"Create-~-Text/#adjusting-text-case","text":"This block creates a version of the input text that is either: * UPPER CASE (all letters upper-case) * lower case * Title Case (first letters upper-case, other letters lower-case) The result of the following block is \"HELLO\". Non-alphabetic characters are not affected. Note that this block on text in languages without case, such as Chinese.","title":"Adjusting text case"},{"location":"Create-~-Text/#trimming-removing-spaces","text":"The following block removes space characters from: * the beginning of the text * the end of the text * both sides of the text The result of the following block is \"hi there\". (Spaces in the middle of the text are not affected.)","title":"Trimming (removing) spaces"},{"location":"Create-~-Text/#printing-text","text":"The print block causes the input value to be displayed in a pop-up window, as shown: If the code is exported as JavaScript, Python, or Dart, it will be printed to the console (screen). In no case is it sent to the printer, as the name might suggest.","title":"Printing text"},{"location":"Create-~-Text/#getting-input-from-the-user","text":"The following block creates a pop-up window that prompts the user to enter a name. The result is stored in the variable name : This is what the current version of the pop-up window looks like: There is also a version of the block for getting a number from the user: This document has been based on the Blockly documentation under the same title by Neil Fraser released under CC BY 3.0","title":"Getting input from the user"},{"location":"Create-~-Variables/","text":"We use the term variable the same as it is used in mathematics and in other programming languages: a named value that can be changed (varies). Variables can be created in several different ways. * Every count with and for each block uses a variable and defines its values. These values can only be used within the block. A traditional computer science term for these are loop variables . * User-defined functions (also known as \"procedures\") can define inputs, which creates variables that can be used only within the function. These are traditionally called \" parameters \" or \"arguments\". * Users may create variables at any time through the \"set\" block. These are traditionally called \" global variables \". Blockly does not support local variables . Default names While users can choose any name for a variable, core Blockly provides a default name, \"item\", as shown in the below picture. Some applications provide other default values, such as \"value\", also shown below. Dropdown menu Clicking on a variable's dropdown symbol (triangle) gives the following menu: The menu provides the following options. * the names of all variables defined in the program. * \"Rename variable...\", which changes the name of this variable wherever it appears in the program. Selecting this opens a small window that prompts the user for the new name with the text: \"Rename all %1 variables to:\", where %1 is replaced by the old name (here \"item\"). * \"New variable...\", which enables the user to enter a new name for the variable, without replacing or changing variables with the old name (here \"item\"). Selecting this opens a small window that prompts the user for the new name with the text \"New variable name:\". Blocks Set The set block assigns a value to a variable, creating the variable if it doesn't already exist. For example, this sets the value of the variable named \"age\" to 12. Get The get block provides the value stored in a variable, without changing it. It is possible, but a bad idea, to write a program in which a get appears without a corresponding set . Example Consider the following example code: The first row of blocks creates a variable named \"age\" and sets its initial value to the number 12. The second row of blocks gets the value 12, adds 1 to it, and stores the sum (13) into the variable. The final row displays the message: \"Happy birthday! You are now 13\" This document has been based on the Blockly documentation under the same title by Neil Fraser released under CC BY 3.0","title":"Variables"},{"location":"Create-~-Variables/#default-names","text":"While users can choose any name for a variable, core Blockly provides a default name, \"item\", as shown in the below picture. Some applications provide other default values, such as \"value\", also shown below.","title":"Default names"},{"location":"Create-~-Variables/#dropdown-menu","text":"Clicking on a variable's dropdown symbol (triangle) gives the following menu: The menu provides the following options. * the names of all variables defined in the program. * \"Rename variable...\", which changes the name of this variable wherever it appears in the program. Selecting this opens a small window that prompts the user for the new name with the text: \"Rename all %1 variables to:\", where %1 is replaced by the old name (here \"item\"). * \"New variable...\", which enables the user to enter a new name for the variable, without replacing or changing variables with the old name (here \"item\"). Selecting this opens a small window that prompts the user for the new name with the text \"New variable name:\".","title":"Dropdown menu"},{"location":"Create-~-Variables/#blocks","text":"","title":"Blocks"},{"location":"Create-~-Variables/#set","text":"The set block assigns a value to a variable, creating the variable if it doesn't already exist. For example, this sets the value of the variable named \"age\" to 12.","title":"Set"},{"location":"Create-~-Variables/#get","text":"The get block provides the value stored in a variable, without changing it. It is possible, but a bad idea, to write a program in which a get appears without a corresponding set .","title":"Get"},{"location":"Create-~-Variables/#example","text":"Consider the following example code: The first row of blocks creates a variable named \"age\" and sets its initial value to the number 12. The second row of blocks gets the value 12, adds 1 to it, and stores the sum (13) into the variable. The final row displays the message: \"Happy birthday! You are now 13\" This document has been based on the Blockly documentation under the same title by Neil Fraser released under CC BY 3.0","title":"Example"},{"location":"Credits/","text":"Credits Ardublockly is a project from @carlosperate https://github.com/carlosperate/ardublockly. But this project could not have been done without the help of others, so thank you to everybody for your valuable contributions: @bmcage @notquitehere @ELundby45 @RubensQRZ @aethaniel @alcir @pteacher @microspace","title":"Credits"},{"location":"Credits/#credits","text":"Ardublockly is a project from @carlosperate https://github.com/carlosperate/ardublockly. But this project could not have been done without the help of others, so thank you to everybody for your valuable contributions: @bmcage @notquitehere @ELundby45 @RubensQRZ @aethaniel @alcir @pteacher @microspace","title":"Credits"},{"location":"FAQs/","text":"FAQs If you have any questions not covered here, please do not hesitate to open a new issue in the Ardublockly repository issue tracker . By reporting issues we can fix them and help you to resolve them, and it will also help other users in the same situation. The FAQs are organised by: Q uestion, A nswer (the solution), R eason (an explanation). User FAQs Q: When I click on the settings field to change the compiler or to change the sketch location no file browser window opens and nothing happens. A: Check all the opened windows on your desktop environment to see if the file browser has been opened in the background. R: Sometimes the file browser window is opened in the background and doesn't come into focus as expected. Q: I've correctly selected the Arduino IDE location in the settings, I can open the sketch in the Arduino IDE from Ardublockly, but it fails when I try to Verify or Upload the code. A: Try with the latest version of the Arduino IDE. R: In most cases is recommended to use the latest version, as it is less likely to have bugs that could affect Ardublockly. You can also check the Known Arduino IDE issues article, and if your are still experiencing problems, please report it in the Ardublockly repository issue tracker . Windows Only Q: I don't see any/enough/expected data from the Arduino IDE/compiler in the \"Arduino IDE output\" box. A: Make sure you have selected the arduino_debug.exe file in the settings instead of arduino.exe . R: On Windows the windowed programs (anthing that opens a window) cannot produce console output, so the Arduino IDE includes two .exe files, one for normal use and one to allow correct console support (which Ardublockly needs). Q: Every time I click on verify or upload code the Arduino splash screen appears momentarily. A: Make sure you have selected the arduino_debug.exe file in the settings instead of arduino.exe . R: The splash screen is shown with the arduino.exe executable, but it isn't with the arduino_debug.exe . Developer FAQs Q: I have edited or created some blocks and followed the instructions to include them into Ardublockly, but I cannot see the changes. A: If you are using a web browser make sure you delete your cache and/or do a hard refresh. If using the desktop application you can achieve this by deleting the folder appdata , located inside the arduexec folder. R: This could happen if your browser, or the Ardublockly desktop application, is using the old cached files. Deleting the cache forces the browser/application to fetch the latest version of the files. Q: I've got an error message saying \"Error: Closure not found\". A: Make sure you have initialised all git submodules as indicated in the \"Download the Source Code\" section from the Building Ardublockly document. R: This could happen if you are trying to run or build the uncompressed version of Blockly and the closure-library folder hasn't been populated correctly. Q: I'm having trouble trying to build Blockly. A: Make sure you are trying to build Blockly using Python 2.7. R: The Blockly build script is only compatible with Python 2, and will likely fail with Python 3. You can find more info at the Building Ardublockly document.","title":"FAQs"},{"location":"FAQs/#faqs","text":"If you have any questions not covered here, please do not hesitate to open a new issue in the Ardublockly repository issue tracker . By reporting issues we can fix them and help you to resolve them, and it will also help other users in the same situation. The FAQs are organised by: Q uestion, A nswer (the solution), R eason (an explanation).","title":"FAQs"},{"location":"FAQs/#user-faqs","text":"Q: When I click on the settings field to change the compiler or to change the sketch location no file browser window opens and nothing happens. A: Check all the opened windows on your desktop environment to see if the file browser has been opened in the background. R: Sometimes the file browser window is opened in the background and doesn't come into focus as expected. Q: I've correctly selected the Arduino IDE location in the settings, I can open the sketch in the Arduino IDE from Ardublockly, but it fails when I try to Verify or Upload the code. A: Try with the latest version of the Arduino IDE. R: In most cases is recommended to use the latest version, as it is less likely to have bugs that could affect Ardublockly. You can also check the Known Arduino IDE issues article, and if your are still experiencing problems, please report it in the Ardublockly repository issue tracker .","title":"User FAQs"},{"location":"FAQs/#windows-only","text":"Q: I don't see any/enough/expected data from the Arduino IDE/compiler in the \"Arduino IDE output\" box. A: Make sure you have selected the arduino_debug.exe file in the settings instead of arduino.exe . R: On Windows the windowed programs (anthing that opens a window) cannot produce console output, so the Arduino IDE includes two .exe files, one for normal use and one to allow correct console support (which Ardublockly needs). Q: Every time I click on verify or upload code the Arduino splash screen appears momentarily. A: Make sure you have selected the arduino_debug.exe file in the settings instead of arduino.exe . R: The splash screen is shown with the arduino.exe executable, but it isn't with the arduino_debug.exe .","title":"Windows Only"},{"location":"FAQs/#developer-faqs","text":"Q: I have edited or created some blocks and followed the instructions to include them into Ardublockly, but I cannot see the changes. A: If you are using a web browser make sure you delete your cache and/or do a hard refresh. If using the desktop application you can achieve this by deleting the folder appdata , located inside the arduexec folder. R: This could happen if your browser, or the Ardublockly desktop application, is using the old cached files. Deleting the cache forces the browser/application to fetch the latest version of the files. Q: I've got an error message saying \"Error: Closure not found\". A: Make sure you have initialised all git submodules as indicated in the \"Download the Source Code\" section from the Building Ardublockly document. R: This could happen if you are trying to run or build the uncompressed version of Blockly and the closure-library folder hasn't been populated correctly. Q: I'm having trouble trying to build Blockly. A: Make sure you are trying to build Blockly using Python 2.7. R: The Blockly build script is only compatible with Python 2, and will likely fail with Python 3. You can find more info at the Building Ardublockly document.","title":"Developer FAQs"},{"location":"Git-Settings/","text":"Git Settings This page lists the general git settings used to maintain this repository. Not everything described here needs to be configured for local development, but it might be useful to at least be aware of the general git work-flow used. Branches There are 2 permanent branches used, any other branch would be a feature branch meant to be merged into master once it is finished. master branch Where the latest working version of the Ardublockly source code resides. gh-pages branch The project pages branch http://carlosperate.github.io/ardublockly/ contains a general project introduction page and an offers online accessibility to the Ardublockly front end web-based part of the application http://carlosperate.github.io/ardublockly/demo/ (that redirects to http://ardublockly.embeddedlog.com/demo/ ) . [branch gh-pages ] remote = origin merge = refs/heads/gh-pages Remotes blockly The blockly remote points at the Google's Blockly repository, so that the latest updates can be pulled in. You can add this remote repository using the following git command: git remote add -f blockly https://github.com/google/blockly.git Which should result in the following git configuration entry: [remote blockly ] url = https://github.com/google/blockly.git fetch = +refs/heads/*:refs/remotes/blockly/* Depreciated SVN upstream Originally the Blockly repository was hosted in Googlecode using Subversion. It has since moved to Github, so this part of the git configuration is not longer relevant. [svn-remote svn ] url = http://blockly.googlecode.com/svn/ fetch = trunk:refs/remotes/trunk branches = branches/*:refs/remotes/* tags = tags/*:refs/remotes/tags/* Git Subtrees There is a single subtree in this repository to contain a fork of Google's Blockly. This fork contains additional features, as part of Ardublockly, that need to be maintained. Once the blockly remote is added, to pull the latest updates the following commands can be used from the project root directory: git fetch blockly master git subtree pull --prefix blockly blockly master Git Submodules There are two submodules as part of this repository, the Google's Closure library and the Ardublockly GitHub Wiki repository. To initialise the modules after a git clone the following command should be executed. From the project root directory: git submodule update --init --recursive","title":"Git Settings"},{"location":"Git-Settings/#git-settings","text":"This page lists the general git settings used to maintain this repository. Not everything described here needs to be configured for local development, but it might be useful to at least be aware of the general git work-flow used.","title":"Git Settings"},{"location":"Git-Settings/#branches","text":"There are 2 permanent branches used, any other branch would be a feature branch meant to be merged into master once it is finished.","title":"Branches"},{"location":"Git-Settings/#master-branch","text":"Where the latest working version of the Ardublockly source code resides.","title":"master branch"},{"location":"Git-Settings/#gh-pages-branch","text":"The project pages branch http://carlosperate.github.io/ardublockly/ contains a general project introduction page and an offers online accessibility to the Ardublockly front end web-based part of the application http://carlosperate.github.io/ardublockly/demo/ (that redirects to http://ardublockly.embeddedlog.com/demo/ ) . [branch gh-pages ] remote = origin merge = refs/heads/gh-pages","title":"gh-pages branch"},{"location":"Git-Settings/#remotes","text":"","title":"Remotes"},{"location":"Git-Settings/#blockly","text":"The blockly remote points at the Google's Blockly repository, so that the latest updates can be pulled in. You can add this remote repository using the following git command: git remote add -f blockly https://github.com/google/blockly.git Which should result in the following git configuration entry: [remote blockly ] url = https://github.com/google/blockly.git fetch = +refs/heads/*:refs/remotes/blockly/*","title":"blockly"},{"location":"Git-Settings/#depreciated-svn-upstream","text":"Originally the Blockly repository was hosted in Googlecode using Subversion. It has since moved to Github, so this part of the git configuration is not longer relevant. [svn-remote svn ] url = http://blockly.googlecode.com/svn/ fetch = trunk:refs/remotes/trunk branches = branches/*:refs/remotes/* tags = tags/*:refs/remotes/tags/*","title":"Depreciated SVN upstream"},{"location":"Git-Settings/#git-subtrees","text":"There is a single subtree in this repository to contain a fork of Google's Blockly. This fork contains additional features, as part of Ardublockly, that need to be maintained. Once the blockly remote is added, to pull the latest updates the following commands can be used from the project root directory: git fetch blockly master git subtree pull --prefix blockly blockly master","title":"Git Subtrees"},{"location":"Git-Settings/#git-submodules","text":"There are two submodules as part of this repository, the Google's Closure library and the Ardublockly GitHub Wiki repository. To initialise the modules after a git clone the following command should be executed. From the project root directory: git submodule update --init --recursive","title":"Git Submodules"},{"location":"Home/","text":"Welcome to the Ardublockly Documentation! The documentation is currently under work. Links to the available pages can be found on the side navigation menu.","title":"Home"},{"location":"Home/#welcome-to-the-ardublockly-documentation","text":"The documentation is currently under work. Links to the available pages can be found on the side navigation menu.","title":"Welcome to the Ardublockly Documentation!"},{"location":"Installing-Ardublockly/","text":"Install Ardublockly In order to simplify its use and to make it available to restricted systems, Ardublockly does not need to be installed, just downloaded and executed. Ardublockly needs the Arduino IDE to be available as well, which can be downloaded from the arduino.cc downloads page . More information can be found in the Configure Ardublockly document . There are two ways to run Ardublockly: a) Executable application : Simplest method, download a zip file which contains the pre-packaged Ardublockly executable desktop software. b) Core version : Running directly from source code, requires only Python and a modern browser (like Chrome or Firefox). Both these methods can be run from the \"pre-packaged\" downloads, and the GitHub repository source code. Download executable Ardublockly The easiest way to use Ardublockly is to download the packaged version, which is a self-contained application that does not have any other dependencies (other than the Arduino IDE). Download the latest stable version from the GitHub releases page. Or alternatively, but not recommended, you can download the latest development builds from the links below. These are automatically generated every time code is pushed to the repository and might contain unfinished or buggy features. http://ardublockly-builds.s3-website-us-west-2.amazonaws.com/index.html Linux (64 bit only) Windows 7 or higher (32/64 bits) macOS 10.10 or higher Download Link Download Link Download Link For any of these and other platforms, the \"core version\" should work on all operating systems with Python and a modern web browser. Run the executable Ardublockly To run the application the steps are slightly different depending on the platform. Windows : Double click on the ardublockly_run.bat file located on the Ardublockly folder. Linux : Execute the ardublockly_run.sh shell script located on the Ardublockly folder. OS X : Right click the Ardublockly.app file and click open . The Arduino IDE is required to compile and load the programs into an Arduino board, more information can be found in the Configure Ardublockly page . Download Ardublockly source code The easiest way to download a full copy of the repository is using git: git clone https://github.com/carlosperate/ardublockly.git cd ardublockly git submodule update --init --recursive When the repository is downloaded directly from github as zip file , the internal git submodules are not included, which is why git is the best method to download a working copy. If you have already \"git cloned\" the Ardublockly source code, make sure the submodules are initialised. You can run the last git command above in the project root directory to ensure this is the case. Download without git If for some reason you are unable to use git, you can download Ardublockly from GitHub as zip file and the Closure library as a zip file . Uncompress the contents from the Ardublockly zip file and then unzip the Closure library into the closure-library folder within Ardublockly (make sure there is not an additional \"closure-library\" nested folder inside this one). If you also need to build Ardublockly locally (which is not necessary to run the development version), all the git submodules required are listed in the .gitmodules file in the repository . Run \"core version\" of Ardublockly This version is the main development environment for the application. You can easily run the latest updates using this method, and should be able to work if there is an issue running the packed Ardublockly application in your platform. Required Software Python 3 : Ardublockly maintains compatibility with Python 2 and 3 (tested on 2.7 and 3.4) Arduino IDE version 1.6 or higher : The latest version is always recommended Modern browser of your choice: Currently supports Firefox, Chrome, IE10+, Opera and Safari; Chrome is recommended Ardublockly source code: The \"Downloading Ardublockly\" section details how to obtain it Linux only requirement Tkinter, which is used in Ardublockly, is not always part of standard Python environment on Linux and needs to be installed. Install Tkinter for Python 2 on Ubuntu: sudo apt-get install python-tk OR, install Tkinter for Python 3 on Ubuntu: sudo apt-get install python3-tk Run Ardublockly from source code To run the \"core version\" execute the start.py python script file located on the the root of the Ardublockly folder (this also works on the \"packaged\" executable Ardublockly version): python start.py Your default browser should open a local web page to load the Ardublockly application. Run the full Ardublockly desktop application from source To run the full desktop version of the development Ardublockly you will also need to install node.js . Navigate to the electron folder inside the package directory: cd package\\electron Execute the following command to download all the dependencies required to for the desktop application, this might take a while: npm install Once that's done, run the following command to open the desktop application: npm start The Arduino IDE is still required to compile and load the programs into an Arduino board, more information can be found in the Configure Ardublockly page .","title":"Installing Ardublockly"},{"location":"Installing-Ardublockly/#install-ardublockly","text":"In order to simplify its use and to make it available to restricted systems, Ardublockly does not need to be installed, just downloaded and executed. Ardublockly needs the Arduino IDE to be available as well, which can be downloaded from the arduino.cc downloads page . More information can be found in the Configure Ardublockly document . There are two ways to run Ardublockly: a) Executable application : Simplest method, download a zip file which contains the pre-packaged Ardublockly executable desktop software. b) Core version : Running directly from source code, requires only Python and a modern browser (like Chrome or Firefox). Both these methods can be run from the \"pre-packaged\" downloads, and the GitHub repository source code.","title":"Install Ardublockly"},{"location":"Installing-Ardublockly/#download-executable-ardublockly","text":"The easiest way to use Ardublockly is to download the packaged version, which is a self-contained application that does not have any other dependencies (other than the Arduino IDE). Download the latest stable version from the GitHub releases page. Or alternatively, but not recommended, you can download the latest development builds from the links below. These are automatically generated every time code is pushed to the repository and might contain unfinished or buggy features. http://ardublockly-builds.s3-website-us-west-2.amazonaws.com/index.html Linux (64 bit only) Windows 7 or higher (32/64 bits) macOS 10.10 or higher Download Link Download Link Download Link For any of these and other platforms, the \"core version\" should work on all operating systems with Python and a modern web browser.","title":"Download executable Ardublockly"},{"location":"Installing-Ardublockly/#run-the-executable-ardublockly","text":"To run the application the steps are slightly different depending on the platform. Windows : Double click on the ardublockly_run.bat file located on the Ardublockly folder. Linux : Execute the ardublockly_run.sh shell script located on the Ardublockly folder. OS X : Right click the Ardublockly.app file and click open . The Arduino IDE is required to compile and load the programs into an Arduino board, more information can be found in the Configure Ardublockly page .","title":"Run the executable Ardublockly"},{"location":"Installing-Ardublockly/#download-ardublockly-source-code","text":"The easiest way to download a full copy of the repository is using git: git clone https://github.com/carlosperate/ardublockly.git cd ardublockly git submodule update --init --recursive When the repository is downloaded directly from github as zip file , the internal git submodules are not included, which is why git is the best method to download a working copy. If you have already \"git cloned\" the Ardublockly source code, make sure the submodules are initialised. You can run the last git command above in the project root directory to ensure this is the case.","title":"Download Ardublockly source code"},{"location":"Installing-Ardublockly/#download-without-git","text":"If for some reason you are unable to use git, you can download Ardublockly from GitHub as zip file and the Closure library as a zip file . Uncompress the contents from the Ardublockly zip file and then unzip the Closure library into the closure-library folder within Ardublockly (make sure there is not an additional \"closure-library\" nested folder inside this one). If you also need to build Ardublockly locally (which is not necessary to run the development version), all the git submodules required are listed in the .gitmodules file in the repository .","title":"Download without git"},{"location":"Installing-Ardublockly/#run-core-version-of-ardublockly","text":"This version is the main development environment for the application. You can easily run the latest updates using this method, and should be able to work if there is an issue running the packed Ardublockly application in your platform.","title":"Run \"core version\" of Ardublockly"},{"location":"Installing-Ardublockly/#required-software","text":"Python 3 : Ardublockly maintains compatibility with Python 2 and 3 (tested on 2.7 and 3.4) Arduino IDE version 1.6 or higher : The latest version is always recommended Modern browser of your choice: Currently supports Firefox, Chrome, IE10+, Opera and Safari; Chrome is recommended Ardublockly source code: The \"Downloading Ardublockly\" section details how to obtain it","title":"Required Software"},{"location":"Installing-Ardublockly/#linux-only-requirement","text":"Tkinter, which is used in Ardublockly, is not always part of standard Python environment on Linux and needs to be installed. Install Tkinter for Python 2 on Ubuntu: sudo apt-get install python-tk OR, install Tkinter for Python 3 on Ubuntu: sudo apt-get install python3-tk","title":"Linux only requirement"},{"location":"Installing-Ardublockly/#run-ardublockly-from-source-code","text":"To run the \"core version\" execute the start.py python script file located on the the root of the Ardublockly folder (this also works on the \"packaged\" executable Ardublockly version): python start.py Your default browser should open a local web page to load the Ardublockly application.","title":"Run Ardublockly from source code"},{"location":"Installing-Ardublockly/#run-the-full-ardublockly-desktop-application-from-source","text":"To run the full desktop version of the development Ardublockly you will also need to install node.js . Navigate to the electron folder inside the package directory: cd package\\electron Execute the following command to download all the dependencies required to for the desktop application, this might take a while: npm install Once that's done, run the following command to open the desktop application: npm start The Arduino IDE is still required to compile and load the programs into an Arduino board, more information can be found in the Configure Ardublockly page .","title":"Run the full Ardublockly desktop application from source"},{"location":"Known-Arduino-IDE-issues/","text":"This is just a quick page with links to known Arduino IDE issues that could affect Ardublockly: Version 1.8.1: Problem using the command line with relative paths https://github.com/arduino/Arduino/pull/5878 Problem using the command line with \"--save-prefs\" flag https://github.com/arduino/Arduino/issues/6067 Version 1.6.14: * Problem using the command line when verifying or uploading to AVR boards (like the Arduino Uno) https://github.com/arduino/Arduino/pull/5427 Version 1.6.13: * Problem using the command line when verifying or uploading to AVR boards (like the Arduino Uno) https://github.com/arduino/Arduino/pull/5427 Version 1.6.12: Problem using the command line when setting the port https://github.com/arduino/Arduino/issues/5456 https://github.com/arduino/Arduino/issues/5413 Problem using the command line when verifying or uploading to AVR boards (like the Arduino Uno) https://github.com/arduino/Arduino/pull/5427","title":"Known Arduino IDE issues"},{"location":"License/","text":"License Ardublockly License This projects is copyright (c) 2016 carlosperate https://github.com/carlosperate/ Unless stated otherwise, the source code of this projects is licensed under the Apache License, Version 2.0 (the \"License\"); you may not use any of the licensed files within this project except in compliance with the License. You may obtain a copy of the License at: http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. License shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. Licensor shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. Legal Entity shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, control means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. You (or Your ) shall mean an individual or Legal Entity exercising permissions granted by this License. Source form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. Object form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. Work shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). Derivative Works shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. Contribution shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, submitted means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as Not a Contribution. Contributor shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a NOTICE text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS Ardublockly Documentation License The Ardublockly Documentation is released under the Creative Commons Attribution license. Some of the documentation has been based on the Google's Blockly documentation, released under the same license, and identified in each of the files. Attribution 4.0 International Creative Commons Corporation (\u201cCreative Commons\u201d) is not a law firm and does not provide legal services or legal advice. Distribution of Creative Commons public licenses does not create a lawyer-client or other relationship. Creative Commons makes its licenses and related information available on an \u201cas-is\u201d basis. Creative Commons gives no warranties regarding its licenses, any material licensed under their terms and conditions, or any related information. Creative Commons disclaims all liability for damages resulting from their use to the fullest extent possible. Using Creative Commons Public Licenses Creative Commons public licenses provide a standard set of terms and conditions that creators and other rights holders may use to share original works of authorship and other material subject to copyright and certain other rights specified in the public license below. The following considerations are for informational purposes only, are not exhaustive, and do not form part of our licenses. Considerations for licensors: Our public licenses are intended for use by those authorized to give the public permission to use material in ways otherwise restricted by copyright and certain other rights. Our licenses are irrevocable. Licensors should read and understand the terms and conditions of the license they choose before applying it. Licensors should also secure all rights necessary before applying our licenses so that the public can reuse the material as expected. Licensors should clearly mark any material not subject to the license. This includes other CC-licensed material, or material used under an exception or limitation to copyright. More considerations for licensors . Considerations for the public: By using one of our public licenses, a licensor grants the public permission to use the licensed material under specified terms and conditions. If the licensor\u2019s permission is not necessary for any reason\u2013for example, because of any applicable exception or limitation to copyright\u2013then that use is not regulated by the license. Our licenses grant only permissions under copyright and certain other rights that a licensor has authority to grant. Use of the licensed material may still be restricted for other reasons, including because others have copyright or other rights in the material. A licensor may make special requests, such as asking that all changes be marked or described. Although not required by our licenses, you are encouraged to respect those requests where reasonable. More considerations for the public . Creative Commons Attribution 4.0 International Public License By exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution 4.0 International Public License (\"Public License\"). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions. Section 1 \u2013 Definitions. a. Adapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image. b. Adapter's License means the license You apply to Your Copyright and Similar Rights in Your contributions to Adapted Material in accordance with the terms and conditions of this Public License. c. Copyright and Similar Rights means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights. d. Effective Technological Measures means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements. e. Exceptions and Limitations means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material. f. Licensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License. g. Licensed Rights means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license. h. Licensor means the individual(s) or entity(ies) granting rights under this Public License. i. Share means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them. j. Sui Generis Database Rights means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world. k. You means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning. Section 2 \u2013 Scope. a. License grant. 1. Subject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to: A. reproduce and Share the Licensed Material, in whole or in part; and B. produce, reproduce, and Share Adapted Material. 2. __Exceptions and Limitations.__ For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions. 3. __Term.__ The term of this Public License is specified in Section 6(a). 4. __Media and formats; technical modifications allowed.__ The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a)(4) never produces Adapted Material. 5. __Downstream recipients.__ A. __Offer from the Licensor \u2013 Licensed Material.__ Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License. B. __No downstream restrictions.__ You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material. 6. __No endorsement.__ Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i). b. Other rights. 1. Moral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise. 2. Patent and trademark rights are not licensed under this Public License. 3. To the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties. Section 3 \u2013 License Conditions. Your exercise of the Licensed Rights is expressly made subject to the following conditions. a. Attribution. 1. If You Share the Licensed Material (including in modified form), You must: A. retain the following if it is supplied by the Licensor with the Licensed Material: i. identification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated); ii. a copyright notice; iii. a notice that refers to this Public License; iv. a notice that refers to the disclaimer of warranties; v. a URI or hyperlink to the Licensed Material to the extent reasonably practicable; B. indicate if You modified the Licensed Material and retain an indication of any previous modifications; and C. indicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License. 2. You may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information. 3. If requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable. 4. If You Share Adapted Material You produce, the Adapter's License You apply must not prevent recipients of the Adapted Material from complying with this Public License. Section 4 \u2013 Sui Generis Database Rights. Where the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material: a. for the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database; b. if You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material; and c. You must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database. For the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights. Section 5 \u2013 Disclaimer of Warranties and Limitation of Liability. a. Unless otherwise separately undertaken by the Licensor, to the extent possible, the Licensor offers the Licensed Material as-is and as-available, and makes no representations or warranties of any kind concerning the Licensed Material, whether express, implied, statutory, or other. This includes, without limitation, warranties of title, merchantability, fitness for a particular purpose, non-infringement, absence of latent or other defects, accuracy, or the presence or absence of errors, whether or not known or discoverable. Where disclaimers of warranties are not allowed in full or in part, this disclaimer may not apply to You. b. To the extent possible, in no event will the Licensor be liable to You on any legal theory (including, without limitation, negligence) or otherwise for any direct, special, indirect, incidental, consequential, punitive, exemplary, or other losses, costs, expenses, or damages arising out of this Public License or use of the Licensed Material, even if the Licensor has been advised of the possibility of such losses, costs, expenses, or damages. Where a limitation of liability is not allowed in full or in part, this limitation may not apply to You. c. The disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability. Section 6 \u2013 Term and Termination. a. This Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically. b. Where Your right to use the Licensed Material has terminated under Section 6(a), it reinstates: 1. automatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or 2. upon express reinstatement by the Licensor. For the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License. c. For the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License. d. Sections 1, 5, 6, 7, and 8 survive termination of this Public License. Section 7 \u2013 Other Terms and Conditions. a. The Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed. b. Any arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License. Section 8 \u2013 Interpretation. a. For the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License. b. To the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions. c. No term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor. d. Nothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority. Creative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the \u201cLicensor.\u201d Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at [creativecommons.org/policies](http://creativecommons.org/policies), Creative Commons does not authorize the use of the trademark \u201cCreative Commons\u201d or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses. Creative Commons may be contacted at creativecommons.org Desktop Application Wrapper License The original electron boilerplate by Jakub Szwacz is release under the following license. All modifications to the boilerplate code for Ardublockly adhere to this license and are copyright of carlosperate. The MIT License (MIT) Copyright (c) 2015 Jakub Szwacz Copyright (c) 2015 carlosperate https://github.com/carlosperate/ Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Unmodified Software Licenses","title":"License"},{"location":"License/#license","text":"","title":"License"},{"location":"License/#ardublockly-license","text":"This projects is copyright (c) 2016 carlosperate https://github.com/carlosperate/ Unless stated otherwise, the source code of this projects is licensed under the Apache License, Version 2.0 (the \"License\"); you may not use any of the licensed files within this project except in compliance with the License. You may obtain a copy of the License at: http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. License shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. Licensor shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. Legal Entity shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, control means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. You (or Your ) shall mean an individual or Legal Entity exercising permissions granted by this License. Source form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. Object form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. Work shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). Derivative Works shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. Contribution shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, submitted means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as Not a Contribution. Contributor shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a NOTICE text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS","title":"Ardublockly License"},{"location":"License/#ardublockly-documentation-license","text":"The Ardublockly Documentation is released under the Creative Commons Attribution license. Some of the documentation has been based on the Google's Blockly documentation, released under the same license, and identified in each of the files.","title":"Ardublockly Documentation License"},{"location":"License/#attribution-40-international","text":"Creative Commons Corporation (\u201cCreative Commons\u201d) is not a law firm and does not provide legal services or legal advice. Distribution of Creative Commons public licenses does not create a lawyer-client or other relationship. Creative Commons makes its licenses and related information available on an \u201cas-is\u201d basis. Creative Commons gives no warranties regarding its licenses, any material licensed under their terms and conditions, or any related information. Creative Commons disclaims all liability for damages resulting from their use to the fullest extent possible.","title":"Attribution 4.0 International"},{"location":"License/#using-creative-commons-public-licenses","text":"Creative Commons public licenses provide a standard set of terms and conditions that creators and other rights holders may use to share original works of authorship and other material subject to copyright and certain other rights specified in the public license below. The following considerations are for informational purposes only, are not exhaustive, and do not form part of our licenses. Considerations for licensors: Our public licenses are intended for use by those authorized to give the public permission to use material in ways otherwise restricted by copyright and certain other rights. Our licenses are irrevocable. Licensors should read and understand the terms and conditions of the license they choose before applying it. Licensors should also secure all rights necessary before applying our licenses so that the public can reuse the material as expected. Licensors should clearly mark any material not subject to the license. This includes other CC-licensed material, or material used under an exception or limitation to copyright. More considerations for licensors . Considerations for the public: By using one of our public licenses, a licensor grants the public permission to use the licensed material under specified terms and conditions. If the licensor\u2019s permission is not necessary for any reason\u2013for example, because of any applicable exception or limitation to copyright\u2013then that use is not regulated by the license. Our licenses grant only permissions under copyright and certain other rights that a licensor has authority to grant. Use of the licensed material may still be restricted for other reasons, including because others have copyright or other rights in the material. A licensor may make special requests, such as asking that all changes be marked or described. Although not required by our licenses, you are encouraged to respect those requests where reasonable. More considerations for the public .","title":"Using Creative Commons Public Licenses"},{"location":"License/#creative-commons-attribution-40-international-public-license","text":"By exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution 4.0 International Public License (\"Public License\"). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions.","title":"Creative Commons Attribution 4.0 International Public License"},{"location":"License/#section-1-definitions","text":"a. Adapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image. b. Adapter's License means the license You apply to Your Copyright and Similar Rights in Your contributions to Adapted Material in accordance with the terms and conditions of this Public License. c. Copyright and Similar Rights means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights. d. Effective Technological Measures means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements. e. Exceptions and Limitations means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material. f. Licensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License. g. Licensed Rights means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license. h. Licensor means the individual(s) or entity(ies) granting rights under this Public License. i. Share means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them. j. Sui Generis Database Rights means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world. k. You means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning.","title":"Section 1 \u2013 Definitions."},{"location":"License/#section-2-scope","text":"a. License grant. 1. Subject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to: A. reproduce and Share the Licensed Material, in whole or in part; and B. produce, reproduce, and Share Adapted Material. 2. __Exceptions and Limitations.__ For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions. 3. __Term.__ The term of this Public License is specified in Section 6(a). 4. __Media and formats; technical modifications allowed.__ The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a)(4) never produces Adapted Material. 5. __Downstream recipients.__ A. __Offer from the Licensor \u2013 Licensed Material.__ Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License. B. __No downstream restrictions.__ You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material. 6. __No endorsement.__ Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i). b. Other rights. 1. Moral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise. 2. Patent and trademark rights are not licensed under this Public License. 3. To the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties.","title":"Section 2 \u2013 Scope."},{"location":"License/#section-3-license-conditions","text":"Your exercise of the Licensed Rights is expressly made subject to the following conditions. a. Attribution. 1. If You Share the Licensed Material (including in modified form), You must: A. retain the following if it is supplied by the Licensor with the Licensed Material: i. identification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated); ii. a copyright notice; iii. a notice that refers to this Public License; iv. a notice that refers to the disclaimer of warranties; v. a URI or hyperlink to the Licensed Material to the extent reasonably practicable; B. indicate if You modified the Licensed Material and retain an indication of any previous modifications; and C. indicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License. 2. You may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information. 3. If requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable. 4. If You Share Adapted Material You produce, the Adapter's License You apply must not prevent recipients of the Adapted Material from complying with this Public License.","title":"Section 3 \u2013 License Conditions."},{"location":"License/#section-4-sui-generis-database-rights","text":"Where the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material: a. for the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database; b. if You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material; and c. You must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database. For the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights.","title":"Section 4 \u2013 Sui Generis Database Rights."},{"location":"License/#section-5-disclaimer-of-warranties-and-limitation-of-liability","text":"a. Unless otherwise separately undertaken by the Licensor, to the extent possible, the Licensor offers the Licensed Material as-is and as-available, and makes no representations or warranties of any kind concerning the Licensed Material, whether express, implied, statutory, or other. This includes, without limitation, warranties of title, merchantability, fitness for a particular purpose, non-infringement, absence of latent or other defects, accuracy, or the presence or absence of errors, whether or not known or discoverable. Where disclaimers of warranties are not allowed in full or in part, this disclaimer may not apply to You. b. To the extent possible, in no event will the Licensor be liable to You on any legal theory (including, without limitation, negligence) or otherwise for any direct, special, indirect, incidental, consequential, punitive, exemplary, or other losses, costs, expenses, or damages arising out of this Public License or use of the Licensed Material, even if the Licensor has been advised of the possibility of such losses, costs, expenses, or damages. Where a limitation of liability is not allowed in full or in part, this limitation may not apply to You. c. The disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability.","title":"Section 5 \u2013 Disclaimer of Warranties and Limitation of Liability."},{"location":"License/#section-6-term-and-termination","text":"a. This Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically. b. Where Your right to use the Licensed Material has terminated under Section 6(a), it reinstates: 1. automatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or 2. upon express reinstatement by the Licensor. For the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License. c. For the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License. d. Sections 1, 5, 6, 7, and 8 survive termination of this Public License.","title":"Section 6 \u2013 Term and Termination."},{"location":"License/#section-7-other-terms-and-conditions","text":"a. The Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed. b. Any arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License.","title":"Section 7 \u2013 Other Terms and Conditions."},{"location":"License/#section-8-interpretation","text":"a. For the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License. b. To the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions. c. No term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor. d. Nothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority. Creative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the \u201cLicensor.\u201d Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at [creativecommons.org/policies](http://creativecommons.org/policies), Creative Commons does not authorize the use of the trademark \u201cCreative Commons\u201d or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses. Creative Commons may be contacted at creativecommons.org","title":"Section 8 \u2013 Interpretation."},{"location":"License/#desktop-application-wrapper-license","text":"The original electron boilerplate by Jakub Szwacz is release under the following license. All modifications to the boilerplate code for Ardublockly adhere to this license and are copyright of carlosperate. The MIT License (MIT) Copyright (c) 2015 Jakub Szwacz Copyright (c) 2015 carlosperate https://github.com/carlosperate/ Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Desktop Application Wrapper License"},{"location":"License/#unmodified-software-licenses","text":"","title":"Unmodified Software Licenses"},{"location":"Projects-Using-Ardublockly/","text":"Projects using Ardublockly If you'd like to add or delete your project feel free to edit this wiki page . Arduino with Ardublockly Udemy Course block.ino Botly Studio CocoBlockly ibtikarmaker Kniwwelino oxocard senseBox Spartan UDOO Neo Yapboz","title":"Projects Using Ardublockly"},{"location":"Projects-Using-Ardublockly/#projects-using-ardublockly","text":"If you'd like to add or delete your project feel free to edit this wiki page . Arduino with Ardublockly Udemy Course block.ino Botly Studio CocoBlockly ibtikarmaker Kniwwelino oxocard senseBox Spartan UDOO Neo Yapboz","title":"Projects using Ardublockly"},{"location":"Quick-Start/","text":"Quick Start This wiki article is still under development","title":"Quick Start"},{"location":"Quick-Start/#quick-start","text":"This wiki article is still under development","title":"Quick Start"},{"location":"Running-Uncompressed-Ardublockly/","text":"Runninng Uncompressed Ardublockly During development you could implement your changes to the source files and re-build each time (using the Building Ardublockly instructions), however the code is minified and would be quite hard to debug. For that reason it is highly encouraged to use the uncompressed version of Blockly used in Ardublockly. Remember that the closure-library folder needs to be populated (as a git submodule it is empty on a normal git clone ), so make sure you have followed the Building Ardublockly instructions to Download the source code. To run Blockly uncompressed, the /ardublockly/index.html file already contains the required sources commented out. Simply modified the following from: !-- Ardublockly - These three files contain the compress version -- script src= ../blockly/blockly_compressed.js /script script src= ../blockly/blocks_compressed.js /script script src= ../blockly/arduino_compressed.js /script !-- To use the uncompressed version comment out the above and comment in the ones below -- !--script src= ../blockly/blockly_uncompressed.js /script script src= ../blockly/blocks/logic.js /script script src= ../blockly/blocks/loops.js /script script src= ../blockly/blocks/math.js /script script src= ../blockly/blocks/text.js /script script src= ../blockly/blocks/lists.js /script script src= ../blockly/blocks/colour.js /script script src= ../blockly/blocks/variables.js /script script src= ../blockly/blocks/procedures.js /script script src= ../blockly/blocks/arduino/io.js /script script src= ../blockly/blocks/arduino/map.js /script script src= ../blockly/blocks/arduino/procedures.js /script script src= ../blockly/blocks/arduino/serial.js /script script src= ../blockly/blocks/arduino/servo.js /script script src= ../blockly/blocks/arduino/spi.js /script script src= ../blockly/blocks/arduino/stepper.js /script script src= ../blockly/blocks/arduino/time.js /script script src= ../blockly/blocks/arduino/tone.js /script script src= ../blockly/blocks/arduino/variables.js /script script src= ../blockly/generators/arduino.js /script script src= ../blockly/generators/arduino/boards.js /script script src= ../blockly/generators/arduino/io.js /script script src= ../blockly/generators/arduino/lists.js /script script src= ../blockly/generators/arduino/logic.js /script script src= ../blockly/generators/arduino/loops.js /script script src= ../blockly/generators/arduino/map.js /script script src= ../blockly/generators/arduino/math.js /script script src= ../blockly/generators/arduino/procedures.js /script script src= ../blockly/generators/arduino/serial.js /script script src= ../blockly/generators/arduino/servo.js /script script src= ../blockly/generators/arduino/spi.js /script script src= ../blockly/generators/arduino/stepper.js /script script src= ../blockly/generators/arduino/text.js /script script src= ../blockly/generators/arduino/time.js /script script src= ../blockly/generators/arduino/tone.js /script script src= ../blockly/generators/arduino/variables.js /script-- To: !-- Ardublockly - These three files contain the compress version -- !--script src= ../blockly/blockly_compressed.js /script script src= ../blockly/blocks_compressed.js /script script src= ../blockly/arduino_compressed.js /script-- !-- To use the uncompressed version comment out the above and comment in the ones below -- script src= ../blockly/blockly_uncompressed.js /script script src= ../blockly/blocks/logic.js /script script src= ../blockly/blocks/loops.js /script script src= ../blockly/blocks/math.js /script script src= ../blockly/blocks/text.js /script script src= ../blockly/blocks/lists.js /script script src= ../blockly/blocks/colour.js /script script src= ../blockly/blocks/variables.js /script script src= ../blockly/blocks/procedures.js /script script src= ../blockly/blocks/arduino/io.js /script script src= ../blockly/blocks/arduino/map.js /script script src= ../blockly/blocks/arduino/procedures.js /script script src= ../blockly/blocks/arduino/serial.js /script script src= ../blockly/blocks/arduino/servo.js /script script src= ../blockly/blocks/arduino/spi.js /script script src= ../blockly/blocks/arduino/stepper.js /script script src= ../blockly/blocks/arduino/time.js /script script src= ../blockly/blocks/arduino/tone.js /script script src= ../blockly/blocks/arduino/variables.js /script script src= ../blockly/generators/arduino.js /script script src= ../blockly/generators/arduino/boards.js /script script src= ../blockly/generators/arduino/io.js /script script src= ../blockly/generators/arduino/lists.js /script script src= ../blockly/generators/arduino/logic.js /script script src= ../blockly/generators/arduino/loops.js /script script src= ../blockly/generators/arduino/map.js /script script src= ../blockly/generators/arduino/math.js /script script src= ../blockly/generators/arduino/procedures.js /script script src= ../blockly/generators/arduino/serial.js /script script src= ../blockly/generators/arduino/servo.js /script script src= ../blockly/generators/arduino/spi.js /script script src= ../blockly/generators/arduino/stepper.js /script script src= ../blockly/generators/arduino/text.js /script script src= ../blockly/generators/arduino/time.js /script script src= ../blockly/generators/arduino/tone.js /script script src= ../blockly/generators/arduino/variables.js /script It is highly recommended to manually comment/uncomment these blocks in the index.html file instead of copy/pasting from this document, as the code snippet displayed here could get out of sync with the source code. Keep in mind that any additional block file would have to to be added as a new script import. Also remember to do hard refresh in-between changes to ensure your browser is not using cached old versions of the JavaScript files.","title":"Running Uncompressed Ardublockly"},{"location":"Running-Uncompressed-Ardublockly/#runninng-uncompressed-ardublockly","text":"During development you could implement your changes to the source files and re-build each time (using the Building Ardublockly instructions), however the code is minified and would be quite hard to debug. For that reason it is highly encouraged to use the uncompressed version of Blockly used in Ardublockly. Remember that the closure-library folder needs to be populated (as a git submodule it is empty on a normal git clone ), so make sure you have followed the Building Ardublockly instructions to Download the source code. To run Blockly uncompressed, the /ardublockly/index.html file already contains the required sources commented out. Simply modified the following from: !-- Ardublockly - These three files contain the compress version -- script src= ../blockly/blockly_compressed.js /script script src= ../blockly/blocks_compressed.js /script script src= ../blockly/arduino_compressed.js /script !-- To use the uncompressed version comment out the above and comment in the ones below -- !--script src= ../blockly/blockly_uncompressed.js /script script src= ../blockly/blocks/logic.js /script script src= ../blockly/blocks/loops.js /script script src= ../blockly/blocks/math.js /script script src= ../blockly/blocks/text.js /script script src= ../blockly/blocks/lists.js /script script src= ../blockly/blocks/colour.js /script script src= ../blockly/blocks/variables.js /script script src= ../blockly/blocks/procedures.js /script script src= ../blockly/blocks/arduino/io.js /script script src= ../blockly/blocks/arduino/map.js /script script src= ../blockly/blocks/arduino/procedures.js /script script src= ../blockly/blocks/arduino/serial.js /script script src= ../blockly/blocks/arduino/servo.js /script script src= ../blockly/blocks/arduino/spi.js /script script src= ../blockly/blocks/arduino/stepper.js /script script src= ../blockly/blocks/arduino/time.js /script script src= ../blockly/blocks/arduino/tone.js /script script src= ../blockly/blocks/arduino/variables.js /script script src= ../blockly/generators/arduino.js /script script src= ../blockly/generators/arduino/boards.js /script script src= ../blockly/generators/arduino/io.js /script script src= ../blockly/generators/arduino/lists.js /script script src= ../blockly/generators/arduino/logic.js /script script src= ../blockly/generators/arduino/loops.js /script script src= ../blockly/generators/arduino/map.js /script script src= ../blockly/generators/arduino/math.js /script script src= ../blockly/generators/arduino/procedures.js /script script src= ../blockly/generators/arduino/serial.js /script script src= ../blockly/generators/arduino/servo.js /script script src= ../blockly/generators/arduino/spi.js /script script src= ../blockly/generators/arduino/stepper.js /script script src= ../blockly/generators/arduino/text.js /script script src= ../blockly/generators/arduino/time.js /script script src= ../blockly/generators/arduino/tone.js /script script src= ../blockly/generators/arduino/variables.js /script-- To: !-- Ardublockly - These three files contain the compress version -- !--script src= ../blockly/blockly_compressed.js /script script src= ../blockly/blocks_compressed.js /script script src= ../blockly/arduino_compressed.js /script-- !-- To use the uncompressed version comment out the above and comment in the ones below -- script src= ../blockly/blockly_uncompressed.js /script script src= ../blockly/blocks/logic.js /script script src= ../blockly/blocks/loops.js /script script src= ../blockly/blocks/math.js /script script src= ../blockly/blocks/text.js /script script src= ../blockly/blocks/lists.js /script script src= ../blockly/blocks/colour.js /script script src= ../blockly/blocks/variables.js /script script src= ../blockly/blocks/procedures.js /script script src= ../blockly/blocks/arduino/io.js /script script src= ../blockly/blocks/arduino/map.js /script script src= ../blockly/blocks/arduino/procedures.js /script script src= ../blockly/blocks/arduino/serial.js /script script src= ../blockly/blocks/arduino/servo.js /script script src= ../blockly/blocks/arduino/spi.js /script script src= ../blockly/blocks/arduino/stepper.js /script script src= ../blockly/blocks/arduino/time.js /script script src= ../blockly/blocks/arduino/tone.js /script script src= ../blockly/blocks/arduino/variables.js /script script src= ../blockly/generators/arduino.js /script script src= ../blockly/generators/arduino/boards.js /script script src= ../blockly/generators/arduino/io.js /script script src= ../blockly/generators/arduino/lists.js /script script src= ../blockly/generators/arduino/logic.js /script script src= ../blockly/generators/arduino/loops.js /script script src= ../blockly/generators/arduino/map.js /script script src= ../blockly/generators/arduino/math.js /script script src= ../blockly/generators/arduino/procedures.js /script script src= ../blockly/generators/arduino/serial.js /script script src= ../blockly/generators/arduino/servo.js /script script src= ../blockly/generators/arduino/spi.js /script script src= ../blockly/generators/arduino/stepper.js /script script src= ../blockly/generators/arduino/text.js /script script src= ../blockly/generators/arduino/time.js /script script src= ../blockly/generators/arduino/tone.js /script script src= ../blockly/generators/arduino/variables.js /script It is highly recommended to manually comment/uncomment these blocks in the index.html file instead of copy/pasting from this document, as the code snippet displayed here could get out of sync with the source code. Keep in mind that any additional block file would have to to be added as a new script import. Also remember to do hard refresh in-between changes to ensure your browser is not using cached old versions of the JavaScript files.","title":"Runninng Uncompressed Ardublockly"},{"location":"To-do-list/","text":"Ardublockly To-do List This is a list of pending actions and features planned for Ardublockly. This is not to be taken strictly, and a lot of these might just be ideas rather than a roadmap. If you would like to contribute to the projects these could be some good areas to look into. It would probably be a good idea to open an issue in the GitHub issue tracker first to discuss if it's something worth doing and the best approach. Ardublockly build system [ ] Create a single script to run all steps in a single command? (very low priority) Ardublockly desktop wrapper [ ] Wait for resolution and implement appData directory move fixes https://github.com/atom/electron/issues/2721 [ ] Move Electron front end changes script from ardublockly html injection into preload script executed from Electron [ ] Add menu to directly select amongst the different Arduino boards supported [ ] Executable app signing [ ] Check for \"built python server executable\", if not found check if python is installed, if it is then run the server in a python sub-process. Python server [ ] Complete compilerserttings module unit test [ ] Complete actions module unit test module [ ] Check for more possible issues with unicode in Python 2 [ ] Experiment with the --preserve-temp-files flag to maintain temporary files and speed up CLI compilation [ ] Remove tkinker file/directory selection and implement an html version [ ] The server should provide fully \"headless\" execution Linux specific [ ] Test load sketch to board (current test in raspberry pi and ubuntu to load sketches in the IDE) with python 2 and 3 [ ] Current port list shows all dev/tty, as all Arduinos should be connected by USB this list can be filtered to only show ttyUSBx ports Mac OS X specific [ ] Test load sketch to board with python 2 and 3 Windows specific [ ] Nothing at the moment Ardublockly front end [ ] Change delete all icon with \"new\" [ ] Similar to Arduino IDE, select area to display button action text, and change the text with button mouse over [ ] Ensure that basic empty sketch code shows on page load [ ] On low resolutions ensure the blockly vertical height is lower than the viewport [ ] Finish Spanish translation Blockly [ ] Merge upstream changes until variables were reworked, ensure everything still works [ ] Merge upstream master with latest variable changes [ ] Type blocks are coming, ensure Ardublockly is ready [ ] Modify zoom icons to be smaller and placed in a different position [ ] Arduino setup and loop block can be copy/pasted using keyboard shorcuts, stop this from happening [ ] Refactor new variable name to be able to select custom name on single action and asynchronously Blockly changes to submit upstream [ ] Any useful changes to the zoom functionality [ ] Use of window.prompt Static typing [ ] logic_ternary block getType to defines type as that of its inputs [ ] logic_null block right now does not return a type, this might change [ ] math_number block 'errornumber' type used for debugging, remove [ ] math_arithmetic getType to check types of given inputs to decide between int or float. Right now first block within sets the type. [ ] math_constrain getType to check types of given inputs to decide between int or float. Right now first block within sets the type. [ ] math_number getType to use regular expressions more efficiently [ ] math_on_list to add static type if lists get implemented [ ] controls_for getVarType function [ ] controls_forEach block uses lists, these are not implemented in the Arduino generator (possible arrays), when implemented this block needs a getVarType, varType, and getType functions [ ] add getVarType to the procedures blocks [ ] the loops count type is set to int, user could input a decimal, so add input checking to determine type [ ] Number blocks automatically trim unnecessary decimal digits \"x.0 = x\", change this behaviour so that \"x.0\" can be set as a decimal Arduino generator [ ] Text trim does not currently generate Arduino valid code Arduino blocks [ ] Code generator for lists into arrays [ ] Create I2C communication blocks with hue 190 [ ] Update the serial print block to specify explicit type (hex, str, int, etc) [ ] Look into all the serial functions and decide what else might fit in [ ] Allow to add return statement (to exit) inside the Arduino setup()/loop() functions Future features [ ] Server component of the block creator to add files into project directory folder and have client side to read them and include them into the toolbox [ ] Serial console for comms with Arduino [ ] Serial data graphing [ ] SVG image creation to displayed used pins with given function [ ] Auto updating desktop application","title":"To-do List"},{"location":"To-do-list/#ardublockly-to-do-list","text":"This is a list of pending actions and features planned for Ardublockly. This is not to be taken strictly, and a lot of these might just be ideas rather than a roadmap. If you would like to contribute to the projects these could be some good areas to look into. It would probably be a good idea to open an issue in the GitHub issue tracker first to discuss if it's something worth doing and the best approach.","title":"Ardublockly To-do List"},{"location":"To-do-list/#ardublockly-build-system","text":"[ ] Create a single script to run all steps in a single command? (very low priority)","title":"Ardublockly build system"},{"location":"To-do-list/#ardublockly-desktop-wrapper","text":"[ ] Wait for resolution and implement appData directory move fixes https://github.com/atom/electron/issues/2721 [ ] Move Electron front end changes script from ardublockly html injection into preload script executed from Electron [ ] Add menu to directly select amongst the different Arduino boards supported [ ] Executable app signing [ ] Check for \"built python server executable\", if not found check if python is installed, if it is then run the server in a python sub-process.","title":"Ardublockly desktop wrapper"},{"location":"To-do-list/#python-server","text":"[ ] Complete compilerserttings module unit test [ ] Complete actions module unit test module [ ] Check for more possible issues with unicode in Python 2 [ ] Experiment with the --preserve-temp-files flag to maintain temporary files and speed up CLI compilation [ ] Remove tkinker file/directory selection and implement an html version [ ] The server should provide fully \"headless\" execution","title":"Python server"},{"location":"To-do-list/#linux-specific","text":"[ ] Test load sketch to board (current test in raspberry pi and ubuntu to load sketches in the IDE) with python 2 and 3 [ ] Current port list shows all dev/tty, as all Arduinos should be connected by USB this list can be filtered to only show ttyUSBx ports","title":"Linux specific"},{"location":"To-do-list/#mac-os-x-specific","text":"[ ] Test load sketch to board with python 2 and 3","title":"Mac OS X specific"},{"location":"To-do-list/#windows-specific","text":"[ ] Nothing at the moment","title":"Windows specific"},{"location":"To-do-list/#ardublockly-front-end","text":"[ ] Change delete all icon with \"new\" [ ] Similar to Arduino IDE, select area to display button action text, and change the text with button mouse over [ ] Ensure that basic empty sketch code shows on page load [ ] On low resolutions ensure the blockly vertical height is lower than the viewport [ ] Finish Spanish translation","title":"Ardublockly front end"},{"location":"To-do-list/#blockly","text":"[ ] Merge upstream changes until variables were reworked, ensure everything still works [ ] Merge upstream master with latest variable changes [ ] Type blocks are coming, ensure Ardublockly is ready [ ] Modify zoom icons to be smaller and placed in a different position [ ] Arduino setup and loop block can be copy/pasted using keyboard shorcuts, stop this from happening [ ] Refactor new variable name to be able to select custom name on single action and asynchronously","title":"Blockly"},{"location":"To-do-list/#blockly-changes-to-submit-upstream","text":"[ ] Any useful changes to the zoom functionality [ ] Use of window.prompt","title":"Blockly changes to submit upstream"},{"location":"To-do-list/#static-typing","text":"[ ] logic_ternary block getType to defines type as that of its inputs [ ] logic_null block right now does not return a type, this might change [ ] math_number block 'errornumber' type used for debugging, remove [ ] math_arithmetic getType to check types of given inputs to decide between int or float. Right now first block within sets the type. [ ] math_constrain getType to check types of given inputs to decide between int or float. Right now first block within sets the type. [ ] math_number getType to use regular expressions more efficiently [ ] math_on_list to add static type if lists get implemented [ ] controls_for getVarType function [ ] controls_forEach block uses lists, these are not implemented in the Arduino generator (possible arrays), when implemented this block needs a getVarType, varType, and getType functions [ ] add getVarType to the procedures blocks [ ] the loops count type is set to int, user could input a decimal, so add input checking to determine type [ ] Number blocks automatically trim unnecessary decimal digits \"x.0 = x\", change this behaviour so that \"x.0\" can be set as a decimal","title":"Static typing"},{"location":"To-do-list/#arduino-generator","text":"[ ] Text trim does not currently generate Arduino valid code","title":"Arduino generator"},{"location":"To-do-list/#arduino-blocks","text":"[ ] Code generator for lists into arrays [ ] Create I2C communication blocks with hue 190 [ ] Update the serial print block to specify explicit type (hex, str, int, etc) [ ] Look into all the serial functions and decide what else might fit in [ ] Allow to add return statement (to exit) inside the Arduino setup()/loop() functions","title":"Arduino blocks"},{"location":"To-do-list/#future-features","text":"[ ] Server component of the block creator to add files into project directory folder and have client side to read them and include them into the toolbox [ ] Serial console for comms with Arduino [ ] Serial data graphing [ ] SVG image creation to displayed used pins with given function [ ] Auto updating desktop application","title":"Future features"},{"location":"_Sidebar/","text":"Home Quick Start User Guide: Installing Ardublockly Configure Ardublockly Arduino Compiler Settings General Blocks: Logic Logic If/Else Loops Math Text Variables Functions FAQs Known Arduino IDE issues Developer Guide: Building Ardublockly Running Uncompressed Ardublockly Git Settings Create Blocks: Overview Extending Ardublockly Add a New Board Add a New Language To-do List Projects Using Ardublockly About: About Ardublockly License Credits","title":" Sidebar"}]}